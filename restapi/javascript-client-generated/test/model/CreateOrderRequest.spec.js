/*
 * PBLM REST API
 * A comprehensive REST API for managing orders, customers, products, inventory, VAT, groups, and currencies.  ## Authentication All endpoints require authentication via headers: - `x-db`: Database identifier - `x-saldiuser`: User identifier - `x-apikey`: API key for authentication 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.69
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PblmRestApi);
  }
}(this, function(expect, PblmRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('CreateOrderRequest', function() {
      beforeEach(function() {
        instance = new PblmRestApi.CreateOrderRequest();
      });

      it('should create an instance of CreateOrderRequest', function() {
        // TODO: update the code to test CreateOrderRequest
        expect(instance).to.be.a(PblmRestApi.CreateOrderRequest);
      });

      it('should have the property firmanavn (base name: "firmanavn")', function() {
        // TODO: update the code to test the property firmanavn
        expect(instance).to.have.property('firmanavn');
        // expect(instance.firmanavn).to.be(expectedValueLiteral);
      });

      it('should have the property telefon (base name: "telefon")', function() {
        // TODO: update the code to test the property telefon
        expect(instance).to.have.property('telefon');
        // expect(instance.telefon).to.be(expectedValueLiteral);
      });

      it('should have the property email (base name: "email")', function() {
        // TODO: update the code to test the property email
        expect(instance).to.have.property('email');
        // expect(instance.email).to.be(expectedValueLiteral);
      });

      it('should have the property momssats (base name: "momssats")', function() {
        // TODO: update the code to test the property momssats
        expect(instance).to.have.property('momssats');
        // expect(instance.momssats).to.be(expectedValueLiteral);
      });

      it('should have the property sum (base name: "sum")', function() {
        // TODO: update the code to test the property sum
        expect(instance).to.have.property('sum');
        // expect(instance.sum).to.be(expectedValueLiteral);
      });

      it('should have the property kostpris (base name: "kostpris")', function() {
        // TODO: update the code to test the property kostpris
        expect(instance).to.have.property('kostpris');
        // expect(instance.kostpris).to.be(expectedValueLiteral);
      });

      it('should have the property moms (base name: "moms")', function() {
        // TODO: update the code to test the property moms
        expect(instance).to.have.property('moms');
        // expect(instance.moms).to.be(expectedValueLiteral);
      });

      it('should have the property valuta (base name: "valuta")', function() {
        // TODO: update the code to test the property valuta
        expect(instance).to.have.property('valuta');
        // expect(instance.valuta).to.be(expectedValueLiteral);
      });

      it('should have the property betalingsbet (base name: "betalingsbet")', function() {
        // TODO: update the code to test the property betalingsbet
        expect(instance).to.have.property('betalingsbet');
        // expect(instance.betalingsbet).to.be(expectedValueLiteral);
      });

      it('should have the property betalingsdage (base name: "betalingsdage")', function() {
        // TODO: update the code to test the property betalingsdage
        expect(instance).to.have.property('betalingsdage');
        // expect(instance.betalingsdage).to.be(expectedValueLiteral);
      });

      it('should have the property addr1 (base name: "addr1")', function() {
        // TODO: update the code to test the property addr1
        expect(instance).to.have.property('addr1');
        // expect(instance.addr1).to.be(expectedValueLiteral);
      });

      it('should have the property addr2 (base name: "addr2")', function() {
        // TODO: update the code to test the property addr2
        expect(instance).to.have.property('addr2');
        // expect(instance.addr2).to.be(expectedValueLiteral);
      });

      it('should have the property postnr (base name: "postnr")', function() {
        // TODO: update the code to test the property postnr
        expect(instance).to.have.property('postnr');
        // expect(instance.postnr).to.be(expectedValueLiteral);
      });

      it('should have the property bynavn (base name: "bynavn")', function() {
        // TODO: update the code to test the property bynavn
        expect(instance).to.have.property('bynavn');
        // expect(instance.bynavn).to.be(expectedValueLiteral);
      });

      it('should have the property land (base name: "land")', function() {
        // TODO: update the code to test the property land
        expect(instance).to.have.property('land');
        // expect(instance.land).to.be(expectedValueLiteral);
      });

      it('should have the property levNavn (base name: "lev_navn")', function() {
        // TODO: update the code to test the property levNavn
        expect(instance).to.have.property('levNavn');
        // expect(instance.levNavn).to.be(expectedValueLiteral);
      });

      it('should have the property levAddr1 (base name: "lev_addr1")', function() {
        // TODO: update the code to test the property levAddr1
        expect(instance).to.have.property('levAddr1');
        // expect(instance.levAddr1).to.be(expectedValueLiteral);
      });

      it('should have the property levAddr2 (base name: "lev_addr2")', function() {
        // TODO: update the code to test the property levAddr2
        expect(instance).to.have.property('levAddr2');
        // expect(instance.levAddr2).to.be(expectedValueLiteral);
      });

      it('should have the property levPostnr (base name: "lev_postnr")', function() {
        // TODO: update the code to test the property levPostnr
        expect(instance).to.have.property('levPostnr');
        // expect(instance.levPostnr).to.be(expectedValueLiteral);
      });

      it('should have the property levBynavn (base name: "lev_bynavn")', function() {
        // TODO: update the code to test the property levBynavn
        expect(instance).to.have.property('levBynavn');
        // expect(instance.levBynavn).to.be(expectedValueLiteral);
      });

      it('should have the property levLand (base name: "lev_land")', function() {
        // TODO: update the code to test the property levLand
        expect(instance).to.have.property('levLand');
        // expect(instance.levLand).to.be(expectedValueLiteral);
      });

      it('should have the property ean (base name: "ean")', function() {
        // TODO: update the code to test the property ean
        expect(instance).to.have.property('ean');
        // expect(instance.ean).to.be(expectedValueLiteral);
      });

      it('should have the property cvrnr (base name: "cvrnr")', function() {
        // TODO: update the code to test the property cvrnr
        expect(instance).to.have.property('cvrnr');
        // expect(instance.cvrnr).to.be(expectedValueLiteral);
      });

      it('should have the property ordredate (base name: "ordredate")', function() {
        // TODO: update the code to test the property ordredate
        expect(instance).to.have.property('ordredate');
        // expect(instance.ordredate).to.be(expectedValueLiteral);
      });

      it('should have the property notes (base name: "notes")', function() {
        // TODO: update the code to test the property notes
        expect(instance).to.have.property('notes');
        // expect(instance.notes).to.be(expectedValueLiteral);
      });

      it('should have the property betalt (base name: "betalt")', function() {
        // TODO: update the code to test the property betalt
        expect(instance).to.have.property('betalt');
        // expect(instance.betalt).to.be(expectedValueLiteral);
      });

    });
  });

}));
