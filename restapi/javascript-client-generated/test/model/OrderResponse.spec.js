/*
 * PBLM REST API
 * A comprehensive REST API for managing orders, customers, products, inventory, VAT, groups, and currencies.  ## Authentication All endpoints require authentication via headers: - `x-db`: Database identifier - `x-saldiuser`: User identifier - `x-apikey`: API key for authentication 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.69
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PblmRestApi);
  }
}(this, function(expect, PblmRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('OrderResponse', function() {
      beforeEach(function() {
        instance = new PblmRestApi.OrderResponse();
      });

      it('should create an instance of OrderResponse', function() {
        // TODO: update the code to test OrderResponse
        expect(instance).to.be.a(PblmRestApi.OrderResponse);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property ordrenr (base name: "ordrenr")', function() {
        // TODO: update the code to test the property ordrenr
        expect(instance).to.have.property('ordrenr');
        // expect(instance.ordrenr).to.be(expectedValueLiteral);
      });

      it('should have the property firmanavn (base name: "firmanavn")', function() {
        // TODO: update the code to test the property firmanavn
        expect(instance).to.have.property('firmanavn');
        // expect(instance.firmanavn).to.be(expectedValueLiteral);
      });

      it('should have the property telefon (base name: "telefon")', function() {
        // TODO: update the code to test the property telefon
        expect(instance).to.have.property('telefon');
        // expect(instance.telefon).to.be(expectedValueLiteral);
      });

      it('should have the property email (base name: "email")', function() {
        // TODO: update the code to test the property email
        expect(instance).to.have.property('email');
        // expect(instance.email).to.be(expectedValueLiteral);
      });

      it('should have the property momssats (base name: "momssats")', function() {
        // TODO: update the code to test the property momssats
        expect(instance).to.have.property('momssats');
        // expect(instance.momssats).to.be(expectedValueLiteral);
      });

      it('should have the property sum (base name: "sum")', function() {
        // TODO: update the code to test the property sum
        expect(instance).to.have.property('sum');
        // expect(instance.sum).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property ordredate (base name: "ordredate")', function() {
        // TODO: update the code to test the property ordredate
        expect(instance).to.have.property('ordredate');
        // expect(instance.ordredate).to.be(expectedValueLiteral);
      });

      it('should have the property valuta (base name: "valuta")', function() {
        // TODO: update the code to test the property valuta
        expect(instance).to.have.property('valuta');
        // expect(instance.valuta).to.be(expectedValueLiteral);
      });

      it('should have the property ref (base name: "ref")', function() {
        // TODO: update the code to test the property ref
        expect(instance).to.have.property('ref');
        // expect(instance.ref).to.be(expectedValueLiteral);
      });

    });
  });

}));
