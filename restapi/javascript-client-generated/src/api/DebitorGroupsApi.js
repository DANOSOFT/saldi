/*
 * PBLM REST API
 * A comprehensive REST API for managing orders, customers, products, inventory, VAT, groups, and currencies.  ## Authentication All endpoints require authentication via headers: - `x-db`: Database identifier - `x-saldiuser`: User identifier - `x-apikey`: API key for authentication 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.69
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import CreateDebitorGroupRequest from '../model/CreateDebitorGroupRequest';
import DebitorGroupListResponse from '../model/DebitorGroupListResponse';
import DebitorGroupResponse from '../model/DebitorGroupResponse';
import ErrorResponse from '../model/ErrorResponse';
import UpdateDebitorGroupRequest from '../model/UpdateDebitorGroupRequest';

/**
* DebitorGroups service.
* @module api/DebitorGroupsApi
* @version 1.0.0
*/
export default class DebitorGroupsApi {

    /**
    * Constructs a new DebitorGroupsApi. 
    * @alias module:api/DebitorGroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the debitorGroupsGet operation.
     * @callback moduleapi/DebitorGroupsApi~debitorGroupsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DebitorGroupListResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all debitor groups
     * @param {String} xDb Database identifier
     * @param {String} xSaldiuser User identifier
     * @param {String} xApikey API key for authentication
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.orderBy  (default to <.>)
     * @param {module:model/String} opts.orderDirection  (default to <.>)
     * @param {module:model/String} opts.field 
     * @param {String} opts.value 
     * @param {module:api/DebitorGroupsApi~debitorGroupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    debitorGroupsGet(xDb, xSaldiuser, xApikey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xDb' is set
      if (xDb === undefined || xDb === null) {
        throw new Error("Missing the required parameter 'xDb' when calling debitorGroupsGet");
      }
      // verify the required parameter 'xSaldiuser' is set
      if (xSaldiuser === undefined || xSaldiuser === null) {
        throw new Error("Missing the required parameter 'xSaldiuser' when calling debitorGroupsGet");
      }
      // verify the required parameter 'xApikey' is set
      if (xApikey === undefined || xApikey === null) {
        throw new Error("Missing the required parameter 'xApikey' when calling debitorGroupsGet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'orderBy': opts['orderBy'],'orderDirection': opts['orderDirection'],'field': opts['field'],'value': opts['value']
      };
      let headerParams = {
        'x-db': xDb,'x-saldiuser': xSaldiuser,'x-apikey': xApikey
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'DatabaseAuth', 'UserAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DebitorGroupListResponse;

      return this.apiClient.callApi(
        '/debitor/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the debitorGroupsIdDelete operation.
     * @callback moduleapi/DebitorGroupsApi~debitorGroupsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a debitor group
     * @param {String} xDb Database identifier
     * @param {String} xSaldiuser User identifier
     * @param {String} xApikey API key for authentication
     * @param {Number} id 
     * @param {module:api/DebitorGroupsApi~debitorGroupsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    debitorGroupsIdDelete(xDb, xSaldiuser, xApikey, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'xDb' is set
      if (xDb === undefined || xDb === null) {
        throw new Error("Missing the required parameter 'xDb' when calling debitorGroupsIdDelete");
      }
      // verify the required parameter 'xSaldiuser' is set
      if (xSaldiuser === undefined || xSaldiuser === null) {
        throw new Error("Missing the required parameter 'xSaldiuser' when calling debitorGroupsIdDelete");
      }
      // verify the required parameter 'xApikey' is set
      if (xApikey === undefined || xApikey === null) {
        throw new Error("Missing the required parameter 'xApikey' when calling debitorGroupsIdDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling debitorGroupsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-db': xDb,'x-saldiuser': xSaldiuser,'x-apikey': xApikey
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'DatabaseAuth', 'UserAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/debitor/groups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the debitorGroupsIdGet operation.
     * @callback moduleapi/DebitorGroupsApi~debitorGroupsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DebitorGroupResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific debitor group
     * @param {String} xDb Database identifier
     * @param {String} xSaldiuser User identifier
     * @param {String} xApikey API key for authentication
     * @param {Number} id 
     * @param {module:api/DebitorGroupsApi~debitorGroupsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    debitorGroupsIdGet(xDb, xSaldiuser, xApikey, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'xDb' is set
      if (xDb === undefined || xDb === null) {
        throw new Error("Missing the required parameter 'xDb' when calling debitorGroupsIdGet");
      }
      // verify the required parameter 'xSaldiuser' is set
      if (xSaldiuser === undefined || xSaldiuser === null) {
        throw new Error("Missing the required parameter 'xSaldiuser' when calling debitorGroupsIdGet");
      }
      // verify the required parameter 'xApikey' is set
      if (xApikey === undefined || xApikey === null) {
        throw new Error("Missing the required parameter 'xApikey' when calling debitorGroupsIdGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling debitorGroupsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-db': xDb,'x-saldiuser': xSaldiuser,'x-apikey': xApikey
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'DatabaseAuth', 'UserAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DebitorGroupResponse;

      return this.apiClient.callApi(
        '/debitor/groups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the debitorGroupsIdPut operation.
     * @callback moduleapi/DebitorGroupsApi~debitorGroupsIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DebitorGroupResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a debitor group
     * @param {module:model/UpdateDebitorGroupRequest} body 
     * @param {String} xDb Database identifier
     * @param {String} xSaldiuser User identifier
     * @param {String} xApikey API key for authentication
     * @param {Number} id 
     * @param {module:api/DebitorGroupsApi~debitorGroupsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    debitorGroupsIdPut(body, xDb, xSaldiuser, xApikey, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling debitorGroupsIdPut");
      }
      // verify the required parameter 'xDb' is set
      if (xDb === undefined || xDb === null) {
        throw new Error("Missing the required parameter 'xDb' when calling debitorGroupsIdPut");
      }
      // verify the required parameter 'xSaldiuser' is set
      if (xSaldiuser === undefined || xSaldiuser === null) {
        throw new Error("Missing the required parameter 'xSaldiuser' when calling debitorGroupsIdPut");
      }
      // verify the required parameter 'xApikey' is set
      if (xApikey === undefined || xApikey === null) {
        throw new Error("Missing the required parameter 'xApikey' when calling debitorGroupsIdPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling debitorGroupsIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-db': xDb,'x-saldiuser': xSaldiuser,'x-apikey': xApikey
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'DatabaseAuth', 'UserAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DebitorGroupResponse;

      return this.apiClient.callApi(
        '/debitor/groups/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the debitorGroupsPost operation.
     * @callback moduleapi/DebitorGroupsApi~debitorGroupsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DebitorGroupResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new debitor group
     * @param {module:model/CreateDebitorGroupRequest} body 
     * @param {String} xDb Database identifier
     * @param {String} xSaldiuser User identifier
     * @param {String} xApikey API key for authentication
     * @param {module:api/DebitorGroupsApi~debitorGroupsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    debitorGroupsPost(body, xDb, xSaldiuser, xApikey, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling debitorGroupsPost");
      }
      // verify the required parameter 'xDb' is set
      if (xDb === undefined || xDb === null) {
        throw new Error("Missing the required parameter 'xDb' when calling debitorGroupsPost");
      }
      // verify the required parameter 'xSaldiuser' is set
      if (xSaldiuser === undefined || xSaldiuser === null) {
        throw new Error("Missing the required parameter 'xSaldiuser' when calling debitorGroupsPost");
      }
      // verify the required parameter 'xApikey' is set
      if (xApikey === undefined || xApikey === null) {
        throw new Error("Missing the required parameter 'xApikey' when calling debitorGroupsPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-db': xDb,'x-saldiuser': xSaldiuser,'x-apikey': xApikey
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'DatabaseAuth', 'UserAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DebitorGroupResponse;

      return this.apiClient.callApi(
        '/debitor/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}