/*
 * PBLM REST API
 * A comprehensive REST API for managing orders, customers, products, inventory, VAT, groups, and currencies.  ## Authentication All endpoints require authentication via headers: - `x-db`: Database identifier - `x-saldiuser`: User identifier - `x-apikey`: API key for authentication 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.69
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import CreateOrderLineRequest from '../model/CreateOrderLineRequest';
import ErrorResponse from '../model/ErrorResponse';
import OrderLineListResponse from '../model/OrderLineListResponse';
import OrderLineResponse from '../model/OrderLineResponse';

/**
* OrderLines service.
* @module api/OrderLinesApi
* @version 1.0.0
*/
export default class OrderLinesApi {

    /**
    * Constructs a new OrderLinesApi. 
    * @alias module:api/OrderLinesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the creditorOrderlinesGet operation.
     * @callback moduleapi/OrderLinesApi~creditorOrderlinesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderLineListResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get creditor order lines
     * @param {String} xDb Database identifier
     * @param {String} xSaldiuser User identifier
     * @param {String} xApikey API key for authentication
     * @param {Number} orderId 
     * @param {module:api/OrderLinesApi~creditorOrderlinesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    creditorOrderlinesGet(xDb, xSaldiuser, xApikey, orderId, callback) {
      
      let postBody = null;
      // verify the required parameter 'xDb' is set
      if (xDb === undefined || xDb === null) {
        throw new Error("Missing the required parameter 'xDb' when calling creditorOrderlinesGet");
      }
      // verify the required parameter 'xSaldiuser' is set
      if (xSaldiuser === undefined || xSaldiuser === null) {
        throw new Error("Missing the required parameter 'xSaldiuser' when calling creditorOrderlinesGet");
      }
      // verify the required parameter 'xApikey' is set
      if (xApikey === undefined || xApikey === null) {
        throw new Error("Missing the required parameter 'xApikey' when calling creditorOrderlinesGet");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling creditorOrderlinesGet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'order_id': orderId
      };
      let headerParams = {
        'x-db': xDb,'x-saldiuser': xSaldiuser,'x-apikey': xApikey
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'DatabaseAuth', 'UserAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrderLineListResponse;

      return this.apiClient.callApi(
        '/creditor/orderlines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the creditorOrderlinesPost operation.
     * @callback moduleapi/OrderLinesApi~creditorOrderlinesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new creditor order line
     * @param {module:model/CreateOrderLineRequest} body 
     * @param {String} xDb Database identifier
     * @param {String} xSaldiuser User identifier
     * @param {String} xApikey API key for authentication
     * @param {module:api/OrderLinesApi~creditorOrderlinesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    creditorOrderlinesPost(body, xDb, xSaldiuser, xApikey, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling creditorOrderlinesPost");
      }
      // verify the required parameter 'xDb' is set
      if (xDb === undefined || xDb === null) {
        throw new Error("Missing the required parameter 'xDb' when calling creditorOrderlinesPost");
      }
      // verify the required parameter 'xSaldiuser' is set
      if (xSaldiuser === undefined || xSaldiuser === null) {
        throw new Error("Missing the required parameter 'xSaldiuser' when calling creditorOrderlinesPost");
      }
      // verify the required parameter 'xApikey' is set
      if (xApikey === undefined || xApikey === null) {
        throw new Error("Missing the required parameter 'xApikey' when calling creditorOrderlinesPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-db': xDb,'x-saldiuser': xSaldiuser,'x-apikey': xApikey
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'DatabaseAuth', 'UserAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/creditor/orderlines', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the debitorOrderlinesGet operation.
     * @callback moduleapi/OrderLinesApi~debitorOrderlinesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderLineListResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get order lines
     * @param {String} xDb Database identifier
     * @param {String} xSaldiuser User identifier
     * @param {String} xApikey API key for authentication
     * @param {Number} orderId Order ID to get lines for
     * @param {module:api/OrderLinesApi~debitorOrderlinesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    debitorOrderlinesGet(xDb, xSaldiuser, xApikey, orderId, callback) {
      
      let postBody = null;
      // verify the required parameter 'xDb' is set
      if (xDb === undefined || xDb === null) {
        throw new Error("Missing the required parameter 'xDb' when calling debitorOrderlinesGet");
      }
      // verify the required parameter 'xSaldiuser' is set
      if (xSaldiuser === undefined || xSaldiuser === null) {
        throw new Error("Missing the required parameter 'xSaldiuser' when calling debitorOrderlinesGet");
      }
      // verify the required parameter 'xApikey' is set
      if (xApikey === undefined || xApikey === null) {
        throw new Error("Missing the required parameter 'xApikey' when calling debitorOrderlinesGet");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling debitorOrderlinesGet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'order_id': orderId
      };
      let headerParams = {
        'x-db': xDb,'x-saldiuser': xSaldiuser,'x-apikey': xApikey
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'DatabaseAuth', 'UserAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrderLineListResponse;

      return this.apiClient.callApi(
        '/debitor/orderlines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the debitorOrderlinesIdGet operation.
     * @callback moduleapi/OrderLinesApi~debitorOrderlinesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderLineResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific order line
     * @param {String} xDb Database identifier
     * @param {String} xSaldiuser User identifier
     * @param {String} xApikey API key for authentication
     * @param {Number} id 
     * @param {module:api/OrderLinesApi~debitorOrderlinesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    debitorOrderlinesIdGet(xDb, xSaldiuser, xApikey, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'xDb' is set
      if (xDb === undefined || xDb === null) {
        throw new Error("Missing the required parameter 'xDb' when calling debitorOrderlinesIdGet");
      }
      // verify the required parameter 'xSaldiuser' is set
      if (xSaldiuser === undefined || xSaldiuser === null) {
        throw new Error("Missing the required parameter 'xSaldiuser' when calling debitorOrderlinesIdGet");
      }
      // verify the required parameter 'xApikey' is set
      if (xApikey === undefined || xApikey === null) {
        throw new Error("Missing the required parameter 'xApikey' when calling debitorOrderlinesIdGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling debitorOrderlinesIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-db': xDb,'x-saldiuser': xSaldiuser,'x-apikey': xApikey
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'DatabaseAuth', 'UserAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrderLineResponse;

      return this.apiClient.callApi(
        '/debitor/orderlines/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the debitorOrderlinesPost operation.
     * @callback moduleapi/OrderLinesApi~debitorOrderlinesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderLineResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new order line
     * @param {module:model/CreateOrderLineRequest} body 
     * @param {String} xDb Database identifier
     * @param {String} xSaldiuser User identifier
     * @param {String} xApikey API key for authentication
     * @param {module:api/OrderLinesApi~debitorOrderlinesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    debitorOrderlinesPost(body, xDb, xSaldiuser, xApikey, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling debitorOrderlinesPost");
      }
      // verify the required parameter 'xDb' is set
      if (xDb === undefined || xDb === null) {
        throw new Error("Missing the required parameter 'xDb' when calling debitorOrderlinesPost");
      }
      // verify the required parameter 'xSaldiuser' is set
      if (xSaldiuser === undefined || xSaldiuser === null) {
        throw new Error("Missing the required parameter 'xSaldiuser' when calling debitorOrderlinesPost");
      }
      // verify the required parameter 'xApikey' is set
      if (xApikey === undefined || xApikey === null) {
        throw new Error("Missing the required parameter 'xApikey' when calling debitorOrderlinesPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-db': xDb,'x-saldiuser': xSaldiuser,'x-apikey': xApikey
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'DatabaseAuth', 'UserAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrderLineResponse;

      return this.apiClient.callApi(
        '/debitor/orderlines', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}