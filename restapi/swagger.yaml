openapi: 3.0.3
info:
  title: SALDI REST API
  description: |
    A comprehensive REST API for managing orders, customers, products, and inventory.
    
    ## Authentication
    All endpoints require authentication via headers:
    - `x-db`: Database identifier
    - `x-saldiuser`: User identifier
    - `Authorization`: API key for authentication
    
  version: 1.0.0
  contact:
    name: API Support
servers:
  - url: https://ssl12.saldi.dk/pblm/restapi/endpoints/v1
    description: Local development server
  - url: https://saldi.dk/v1
    description: Production server

security:
  - DatabaseAuth: []
    UserAuth: []
    ApiKeyAuth: []

paths:
  # Debitor Orders
  /debitor/orders/:
    get:
      tags:
        - Debitor Orders
      summary: Get all debitor orders
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: orderBy
          in: query
          schema:
            type: string
            default: ordrenr
        - name: orderDirection
          in: query
          schema:
            type: string
            enum: [ASC, DESC]
            default: ASC
        - name: fromDate
          in: query
          schema:
            type: string
            format: date
        - name: toDate
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderListResponse'
              examples:
                all_orders:
                  summary: All Debitor Orders
                  description: Get all debitor orders with English field names
                  value:
                    success: true
                    data:
                      - id: 1001
                        accountId: 201
                        companyName: "ACME Corporation"
                        phone: "+45 12345678"
                        email: "contact@acme.com"
                        vatRate: 25.0
                        address:
                          addr1: "Main Street 123"
                          addr2: "Suite 456"
                          zipcode: "1234"
                          city: "Copenhagen"
                          country: "Denmark"
                        delivery:
                          name: "ACME Warehouse"
                          addr1: "Industrial Road 789"
                          addr2: "Building B"
                          zipcode: "5678"
                          city: "Aarhus"
                          country: "Denmark"
                        ean: "1234567890123"
                        cvr: "12345678"
                        orderDate: "2025-06-20"
                        invoiceDate: "2025-06-21"
                        notes: "Urgent delivery required"
                        paid: false
                        paymentInfo:
                          paymentTerms: "Net 30"
                          paymentDays: 30
                        economic:
                          sum: 1250.00
                          costPrice: 1000.00
                          vat: 250.00
                          currency: "DKK"
                          currencyRate: 1.0
                        accountNumber: "1000"
                        reference: "user123"
                        status: 0
                        orderNo: 2025001
                      - id: 1002
                        accountId: 202
                        companyName: "TechCorp Ltd"
                        phone: "+45 87654321"
                        email: "orders@techcorp.com"
                        vatRate: 25.0
                        address:
                          addr1: "Tech Street 456"
                          addr2: ""
                          zipcode: "2345"
                          city: "Odense"
                          country: "Denmark"
                        delivery:
                          name: "TechCorp Office"
                          addr1: "Tech Street 456"
                          addr2: ""
                          zipcode: "2345"
                          city: "Odense"
                          country: "Denmark"
                        ean: ""
                        cvr: "87654321"
                        orderDate: "2025-06-19"
                        invoiceDate: null
                        notes: ""
                        paid: false
                        paymentInfo:
                          paymentTerms: "Net 14"
                          paymentDays: 14
                        economic:
                          sum: 750.00
                          costPrice: 600.00
                          vat: 150.00
                          currency: "DKK"
                          currencyRate: 1.0
                        accountNumber: "1001"
                        reference: "user456"
                        status: 0
                        orderNo: 2025002
    post:
      tags:
        - Debitor Orders
      summary: Create a new debitor order
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
            examples:
              basic_debitor_order_new_customer:
                summary: Basic Order (New Customer)
                description: Create a debitor order for a new customer using English field names
                value:
                  companyName: "ACME Corporation"
                  phone: "+45 12345678"
                  email: "contact@acme.com"
                  vatRate: 25.0
                  sum: 1250.00
                  costPrice: 1000.00
                  vat: 250.00
                  currency: "DKK"
                  paymentTerms: "netto"
                  paymentDays: 30
                  address1: "Main Street 123"
                  address2: "Suite 456"
                  postalCode: "1234"
                  city: "Copenhagen"
                  country: "Denmark"
                  deliveryName: "ACME Warehouse"
                  deliveryAddress1: "Industrial Road 789"
                  deliveryAddress2: "Building B"
                  deliveryPostalCode: "5678"
                  deliveryCity: "Aarhus"
                  deliveryCountry: "Denmark"
                  ean: "1234567890123"
                  cvrNo: "12345678"
                  orderDate: "2025-07-31"
                  invoiceDate: "2025-07-31"
                  notes: "Urgent delivery required"
                  paid: false
                  customerGroup: 1
                  type: "DO"
              basic_debitor_order_existing_customer:
                summary: Basic Order (Existing Customer)
                description: Create a debitor order for an existing customer using account ID
                value:
                  accountId: 201
                  vatRate: 25.0
                  sum: 1250.00
                  costPrice: 1000.00
                  vat: 250.00
                  orderDate: "2025-07-31"
                  notes: "Rush order"
              detailed_debitor_order:
                summary: Detailed Order with Full Information
                description: Create a debitor order with all available fields
                value:
                  companyName: "ACME Corporation"
                  phone: "+45 12345678"
                  email: "contact@acme.com"
                  vatRate: 25.0
                  sum: 1250.00
                  costPrice: 1000.00
                  vat: 250.00
                  currency: "DKK"
                  paymentTerms: "netto"
                  paymentDays: 30
                  address1: "Main Street 123"
                  address2: "Suite 456"
                  postalCode: "1234"
                  city: "Copenhagen"
                  country: "Denmark"
                  deliveryName: "ACME Warehouse"
                  deliveryAddress1: "Industrial Road 789"
                  deliveryAddress2: "Building B"
                  deliveryPostalCode: "5678"
                  deliveryCity: "Aarhus"
                  deliveryCountry: "Denmark"
                  ean: "1234567890123"
                  cvrNo: "12345678"
                  orderDate: "2025-07-31"
                  invoiceDate: "2025-07-31"
                  notes: "Urgent delivery required"
                  paid: false
                  customerGroup: 1
                  type: "DO"
              danish_field_names_example:
                summary: Using Danish Field Names (Backward Compatibility)
                description: Example using Danish field names for backward compatibility
                value:
                  firmanavn: "ACME Corporation"
                  telefon: "+45 12345678"
                  email: "contact@acme.com"
                  momssats: 25.0
                  sum: 1250.00
                  kostpris: 1000.00
                  moms: 250.00
                  ordredate: "2025-07-31"
                  art: "DO"
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Debitor order created successfully"
                  data:
                    $ref: '#/components/schemas/OrderResponse'
              examples:
                created_order:
                  summary: Created Debitor Order
                  value:
                    success: true
                    message: "Debitor order created successfully"
                    data:
                      id: 1001
                      accountId: 201
                      companyName: "ACME Corporation"
                      phone: "+45 12345678"
                      email: "contact@acme.com"
                      vatRate: 25.0
                      address:
                        addr1: "Main Street 123"
                        addr2: "Suite 456"
                        zipcode: "1234"
                        city: "Copenhagen"
                        country: "Denmark"
                      delivery:
                        name: "ACME Warehouse"
                        addr1: "Industrial Road 789"
                        addr2: "Building B"
                        zipcode: "5678"
                        city: "Aarhus"
                        country: "Denmark"
                      ean: "1234567890123"
                      cvr: "12345678"
                      orderDate: "2025-06-20"
                      invoiceDate: "2025-06-21"
                      notes: "Urgent delivery required"
                      paid: false
                      paymentInfo:
                        paymentTerms: "Net 30"
                        paymentDays: 30
                      economic:
                        sum: 1250.00
                        costPrice: 1000.00
                        vat: 250.00
                        currency: "DKK"
                        currencyRate: 1.0
                      accountNumber: "1000"
                      reference: "user123"
                      status: 0
                      orderNo: 2025001

  /debitor/orders/{id}:
    get:
      tags:
        - Debitor Orders
      summary: Get a specific debitor order
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/OrderResponse'
              examples:
                single_order:
                  summary: Single Debitor Order
                  value:
                    success: true
                    data:
                      id: 1001
                      accountId: 201
                      companyName: "ACME Corporation"
                      phone: "+45 12345678"
                      email: "contact@acme.com"
                      vatRate: 25.0
                      address:
                        addr1: "Main Street 123"
                        addr2: "Suite 456"
                        zipcode: "1234"
                        city: "Copenhagen"
                        country: "Denmark"
                      delivery:
                        name: "ACME Warehouse"
                        addr1: "Industrial Road 789"
                        addr2: "Building B"
                        zipcode: "5678"
                        city: "Aarhus"
                        country: "Denmark"
                      ean: "1234567890123"
                      cvr: "12345678"
                      orderDate: "2025-06-20"
                      invoiceDate: "2025-06-21"
                      notes: "Urgent delivery required"
                      paid: false
                      paymentInfo:
                        paymentTerms: "Net 30"
                        paymentDays: 30
                      economic:
                        sum: 1250.00
                        costPrice: 1000.00
                        vat: 250.00
                        currency: "DKK"
                        currencyRate: 1.0
                      accountNumber: "1000"
                      reference: "user123"
                      status: 0
                      orderNo: 2025001
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Creditor Orders
  /creditor/orders/:
    get:
      tags:
        - Creditor Orders
      summary: Get all creditor orders
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: orderBy
          in: query
          schema:
            type: string
            default: ordrenr
        - name: orderDirection
          in: query
          schema:
            type: string
            enum: [ASC, DESC]
            default: ASC
        - name: fromDate
          in: query
          schema:
            type: string
            format: date
        - name: toDate
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: List of creditor orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderListResponse'
              examples:
                all_creditor_orders:
                  summary: All Creditor Orders
                  description: Get all creditor orders with English field names
                  value:
                    success: true
                    data:
                      - id: 2001
                        accountId: 301
                        companyName: "Supplier ABC"
                        phone: "+45 11223344"
                        email: "orders@supplierabc.com"
                        vatRate: 25.0
                        address:
                          addr1: "Supplier Street 789"
                          addr2: ""
                          zipcode: "3456"
                          city: "Copenhagen"
                          country: "Denmark"
                        delivery:
                          name: "Our Warehouse"
                          addr1: "Warehouse Road 123"
                          addr2: "Gate A"
                          zipcode: "1234"
                          city: "Copenhagen"
                          country: "Denmark"
                        ean: ""
                        cvr: "11223344"
                        orderDate: "2025-06-18"
                        invoiceDate: null
                        notes: "Standard delivery"
                        paid: false
                        paymentInfo:
                          paymentTerms: "Net 30"
                          paymentDays: 30
                        economic:
                          sum: 2500.00
                          costPrice: 2000.00
                          vat: 500.00
                          currency: "DKK"
                          currencyRate: 1.0
                        accountNumber: "4000"
                        reference: "buyer123"
                        status: 0
                        orderNo: 2025050
    post:
      tags:
        - Creditor Orders
      summary: Create a new creditor order
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
            examples:
              basic_creditor_order_new_supplier:
                summary: Basic Order (New Supplier)
                description: Create a creditor order for a new supplier using English field names
                value:
                  companyName: "Supplier ABC"
                  phone: "+45 11223344"
                  email: "orders@supplierabc.com"
                  vatRate: 25.0
                  sum: 2500.00
                  costPrice: 2000.00
                  vat: 500.00
                  currency: "DKK"
                  paymentTerms: "netto"
                  paymentDays: 30
                  address1: "Supplier Street 789"
                  address2: ""
                  postalCode: "3456"
                  city: "Copenhagen"
                  country: "Denmark"
                  deliveryName: "Our Warehouse"
                  deliveryAddress1: "Warehouse Road 123"
                  deliveryAddress2: "Gate A"
                  deliveryPostalCode: "1234"
                  deliveryCity: "Copenhagen"
                  deliveryCountry: "Denmark"
                  ean: ""
                  cvrNo: "11223344"
                  orderDate: "2025-07-31"
                  invoiceDate: null
                  notes: "Standard delivery"
                  paid: false
                  type: "KO"
                  customerGroup: 1
              basic_creditor_order_existing_supplier:
                summary: Basic Order (Existing Supplier)
                description: Create a creditor order for an existing supplier using account ID
                value:
                  accountId: 301
                  vatRate: 25.0
                  sum: 2500.00
                  costPrice: 2000.00
                  vat: 500.00
                  type: "KO"
                  orderDate: "2025-07-31"
                  notes: "Monthly supply order"
              detailed_creditor_order:
                summary: Detailed Order with Full Information
                description: Create a creditor order with all available fields
                value:
                  companyName: "Supplier ABC"
                  phone: "+45 11223344"
                  email: "orders@supplierabc.com"
                  vatRate: 25.0
                  sum: 2500.00
                  costPrice: 2000.00
                  vat: 500.00
                  currency: "DKK"
                  paymentTerms: "netto"
                  paymentDays: 30
                  address1: "Supplier Street 789"
                  address2: ""
                  postalCode: "3456"
                  city: "Copenhagen"
                  country: "Denmark"
                  deliveryName: "Our Warehouse"
                  deliveryAddress1: "Warehouse Road 123"
                  deliveryAddress2: "Gate A"
                  deliveryPostalCode: "1234"
                  deliveryCity: "Copenhagen"
                  deliveryCountry: "Denmark"
                  ean: ""
                  cvrNo: "11223344"
                  orderDate: "2025-07-31"
                  invoiceDate: null
                  notes: "Standard delivery"
                  paid: false
                  type: "KO"
                  customerGroup: 1
              danish_field_names_example:
                summary: Using Danish Field Names (Backward Compatibility)
                description: Example using Danish field names for backward compatibility
                value:
                  firmanavn: "Supplier ABC"
                  telefon: "+45 11223344"
                  email: "orders@supplierabc.com"
                  momssats: 25.0
                  sum: 2500.00
                  kostpris: 2000.00
                  moms: 500.00
                  ordredate: "2025-07-31"
                  art: "KO"
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Creditor order created successfully"
                  data:
                    $ref: '#/components/schemas/OrderResponse'
              examples:
                created_order:
                  summary: Created Creditor Order
                  value:
                    success: true
                    message: "Creditor order created successfully"
                    data:
                      id: 2001
                      accountId: 301
                      companyName: "Supplier ABC"
                      phone: "+45 11223344"
                      email: "orders@supplierabc.com"
                      vatRate: 25.0
                      address:
                        addr1: "Supplier Street 789"
                        addr2: ""
                        zipcode: "3456"
                        city: "Copenhagen"
                        country: "Denmark"
                      delivery:
                        name: "Our Warehouse"
                        addr1: "Warehouse Road 123"
                        addr2: "Gate A"
                        zipcode: "1234"
                        city: "Copenhagen"
                        country: "Denmark"
                      ean: ""
                      cvr: "11223344"
                      orderDate: "2025-06-18"
                      invoiceDate: null
                      notes: "Standard delivery"
                      paid: false
                      paymentInfo:
                        paymentTerms: "Net 30"
                        paymentDays: 30
                      economic:
                        sum: 2500.00
                        costPrice: 2000.00
                        vat: 500.00
                        currency: "DKK"
                        currencyRate: 1.0
                      accountNumber: "4000"
                      reference: "buyer123"
                      status: 0
                      orderNo: 2025050
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /creditor/orders/{id}:
    get:
      tags:
        - Creditor Orders
      summary: Get a specific creditor order
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/OrderResponse'
              examples:
                single_creditor_order:
                  summary: Single Creditor Order
                  value:
                    success: true
                    data:
                      id: 2001
                      accountId: 301
                      companyName: "Supplier ABC"
                      phone: "+45 11223344"
                      email: "orders@supplierabc.com"
                      vatRate: 25.0
                      address:
                        addr1: "Supplier Street 789"
                        addr2: ""
                        zipcode: "3456"
                        city: "Copenhagen"
                        country: "Denmark"
                      delivery:
                        name: "Our Warehouse"
                        addr1: "Warehouse Road 123"
                        addr2: "Gate A"
                        zipcode: "1234"
                        city: "Copenhagen"
                        country: "Denmark"
                      ean: ""
                      cvr: "11223344"
                      orderDate: "2025-06-18"
                      invoiceDate: null
                      notes: "Standard delivery"
                      paid: false
                      paymentInfo:
                        paymentTerms: "Net 30"
                        paymentDays: 30
                      economic:
                        sum: 2500.00
                        costPrice: 2000.00
                        vat: 500.00
                        currency: "DKK"
                        currencyRate: 1.0
                      accountNumber: "4000"
                      reference: "buyer123"
                      status: 0
                      orderNo: 2025050
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Order Lines - Debitor
  /debitor/orderlines/:
    get:
      tags:
        - Order Lines
      summary: Get order lines
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: order_id
          in: query
          required: true
          schema:
            type: integer
          description: Order ID to get lines for
      responses:
        '200':
          description: List of order lines
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderLineListResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Order Lines
      summary: Create a new order line
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderLineRequest'
      responses:
        '201':
          description: Order line created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderLineResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /debitor/orderlines/{id}:
    get:
      tags:
        - Order Lines
      summary: Get a specific order line
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Order line details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderLineResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Order Lines - Creditor
  /creditor/orderlines/:
    get:
      tags:
        - Order Lines
      summary: Get creditor order lines
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: order_id
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of order lines
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderLineListResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Order Lines
      summary: Create a new creditor order line
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderLineRequest'
      responses:
        '201':
          description: Order line created successfully
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Customers (Debitors)
  /debitor/customers/:
    get:
      tags:
        - Customers
      summary: Get all customers
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
      responses:
        '200':
          description: List of customers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerListResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Customers
      summary: Create a new customer
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerRequest'
      responses:
        '201':
          description: Customer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /debitor/customers/{id}:
    get:
      tags:
        - Customers
      summary: Get a specific customer
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Customer details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Customers
      summary: Update a customer
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomerRequest'
      responses:
        '200':
          description: Customer updated successfully
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Customers
      summary: Delete a customer
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Customer deleted successfully
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Creditors
  /creditor/creditors/:
    get:
      tags:
        - Creditors
      summary: Get all creditors
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
      responses:
        '200':
          description: List of creditors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerListResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Creditors
      summary: Create a new creditor
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerRequest'
      responses:
        '201':
          description: Creditor created successfully
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /creditor/creditors/{id}:
    get:
      tags:
        - Creditors
      summary: Get a specific creditor
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Creditor details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Creditors
      summary: Update a creditor
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomerRequest'
      responses:
        '200':
          description: Creditor updated successfully
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Creditors
      summary: Delete a creditor
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Creditor deleted successfully
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Products
  /products/:
    get:
      tags:
        - Products
      summary: Get all products
      description: |
        Get all products with optional filtering and sorting. The API accepts both English and Danish field names for backward compatibility.
        
        **English Field Names:**
        - `sku` - Product SKU/number
        - `barcode` - Product barcode
        - `description` - Product description
        - `salesPrice` - Sales price
        - `costPrice` - Cost price
        - `group` - Product group ID
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: orderBy
          in: query
          schema:
            type: string
            default: id
            enum: [id, sku, description, salesPrice, costPrice, group]
          description: Field to order by
          example: "sku"
        - name: orderDirection
          in: query
          schema:
            type: string
            enum: [ASC, DESC]
            default: ASC
          description: Sort direction
        - name: field
          in: query
          schema:
            type: string
            enum: [id, sku, barcode, description, salesPrice, costPrice, group]
          description: Field to filter by
          example: "description"
        - name: value
          in: query
          schema:
            type: string
          description: Value to filter by
          example: "Premium"
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
            maximum: 200
            minimum: 1
          description: Maximum number of products to return
          example: 20
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductListResponse'
              examples:
                all_products:
                  summary: All Products
                  description: Get all products with basic information
                  value:
                    success: true
                    data:
                      - id: 301
                        sku: "PROD001"
                        barcode: "1234567890123"
                        description: "Premium Product"
                        salesPrice: 250.00
                        costPrice: 200.00
                        group: 1
                      - id: 302
                        sku: "PROD002"
                        barcode: "1234567890124"
                        description: "Standard Product"
                        salesPrice: 150.00
                        costPrice: 120.00
                        group: 1
                filtered_products:
                  summary: Filtered Products
                  description: Get products filtered by description
                  value:
                    success: true
                    data:
                      - id: 301
                        sku: "PROD001"
                        barcode: "1234567890123"
                        description: "Premium Product"
                        salesPrice: 250.00
                        costPrice: 200.00
                        group: 1
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Products
      summary: Create a new product
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
            examples:
              basic_product:
                summary: Basic Product
                description: Create a product with minimal required fields
                value:
                  sku: "PROD001"
                  description: "Basic Product"
                  salesPrice: 100.00
              detailed_product:
                summary: Detailed Product
                description: Create a product with all available fields
                value:
                  sku: "PROD002"
                  barcode: "1234567890124"
                  description: "Premium Product with full specifications"
                  unit: "pcs"
                  unit2: "box"
                  salesPrice: 250.00
                  costPrice: 200.00
                  notes: "High quality premium product"
                  serialNumber: ""
                  collectionOfItems: "N"
                  partialItem: "N"
                  minInventory: 10.0
                  maxInventory: 100.0
                  location: "A1-01"
                  group: 1
                  netweight: 1.2
                  netweightunit: "kg"
                  grossweight: 1.5
                  grossweightunit: "kg"
                  length: 15.8
                  width: 10.5
                  height: 5.2
                  colli_webfreight: 0.0
              electronic_component:
                summary: Electronic Component
                description: Create an electronic component product
                value:
                  sku: "ELEC001"
                  barcode: "5901234567890"
                  description: "Arduino Uno R3 Microcontroller"
                  unit: "pcs"
                  unit2: ""
                  salesPrice: 299.95
                  costPrice: 180.00
                  notes: "Compatible with Arduino IDE"
                  serialNumber: ""
                  collectionOfItems: "N"
                  partialItem: "N"
                  minInventory: 5.0
                  maxInventory: 50.0
                  location: "E1-A5"
                  group: 1
                  netweight: 0.025
                  netweightunit: "kg"
                  grossweight: 0.030
                  grossweightunit: "kg"
                  length: 6.8
                  width: 5.3
                  height: 1.5
                  colli_webfreight: 0.0
              office_supply:
                summary: Office Supply
                description: Create an office supply product
                value:
                  sku: "OFF001"
                  barcode: ""
                  description: "A4 Copy Paper - 500 sheets"
                  unit: "ream"
                  unit2: "box"
                  salesPrice: 45.00
                  costPrice: 32.00
                  notes: "80gsm white paper"
                  serialNumber: ""
                  collectionOfItems: "N"
                  partialItem: "N"
                  minInventory: 20.0
                  maxInventory: 200.0
                  location: "B2-15"
                  group: 2
                  netweight: 2.5
                  netweightunit: "kg"
                  grossweight: 2.8
                  grossweightunit: "kg"
                  length: 21.0
                  width: 29.7
                  height: 5.0
                  colli_webfreight: 0.0
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Product created successfully"
                  data:
                    $ref: '#/components/schemas/ProductResponse'
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missing_sku:
                  summary: Missing SKU
                  value:
                    success: false
                    message: "SKU is required"
                    data: null
                duplicate_sku:
                  summary: Duplicate SKU
                  value:
                    success: false
                    message: "Product with SKU 'PROD001' already exists."
                    data: null
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /products/{id}:
    get:
      tags:
        - Products
      summary: Get a specific product
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Product ID
          example: 301
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/ProductResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Products
      summary: Update a product
      description: |
        Update an existing product using English field names.
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Product ID
          example: 301
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
            examples:
              update_price:
                summary: Update Price
                value:
                  id: 301
                  salesPrice: 275.00
                  costPrice: 220.00
              update_description:
                summary: Update Description
                value:
                  id: 301
                  description: "Updated Premium Product"
                  notes: "Updated product information"
              update_all:
                summary: Update All Fields
                value:
                  id: 301
                  sku: "PROD001"
                  barcode: "1234567890123"
                  description: "Updated Premium Product"
                  salesPrice: 275.00
                  costPrice: 220.00
                  unit: "pcs"
                  group: 2
                  minInventory: 15.0
                  maxInventory: 150.0
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Product updated successfully"
                  data:
                    $ref: '#/components/schemas/ProductResponse'
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Products
      summary: Delete a product
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Product ID
          example: 301
      responses:
        '200':
          description: Product deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Product deleted successfully"
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Cannot delete - product is referenced by other records
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Inventory - Warehouses
  /inventory/warehouses/:
    get:
      tags:
        - Inventory
      summary: Get all warehouses
      description: |
        Get all warehouses with optional filtering and sorting. The API accepts both English and Danish field names for backward compatibility.
        
        **English Field Names:**
        - `description` - Warehouse description
        - `number` - Warehouse number
        - `fiscalYear` - Fiscal year
        - `productId` - Product ID for inventory association
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: orderBy
          in: query
          schema:
            type: string
            default: number
            enum: [id, number, description, fiscalYear]
          description: Field to order by
          example: "number"
        - name: orderDirection
          in: query
          schema:
            type: string
            enum: [ASC, DESC]
            default: ASC
          description: Sort direction
        - name: field
          in: query
          schema:
            type: string
            enum: [id, number, description, fiscalYear]
          description: Field to filter by
          example: "description"
        - name: value
          in: query
          schema:
            type: string
          description: Value to filter by
          example: "Main Warehouse"
        - name: productId
          in: query
          schema:
            type: integer
          description: Product ID to associate with warehouse inventory
          example: 301
        - name: inventory
          in: query
          schema:
            type: integer
            default: 1
          description: Inventory number
          example: 1
      responses:
        '200':
          description: List of warehouses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WarehouseListResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Inventory
      summary: Create a new warehouse
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWarehouseRequest'
            examples:
              basic_warehouse:
                summary: Basic Warehouse
                description: Create a warehouse with required fields only
                value:
                  description: "Main Warehouse"
                  number: "001"
              detailed_warehouse:
                summary: Detailed Warehouse
                description: Create a warehouse with all available fields
                value:
                  description: "Main Distribution Center"
                  number: "001"
                  fiscalYear: 2025
      responses:
        '201':
          description: Warehouse created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Warehouse created successfully"
                  data:
                    $ref: '#/components/schemas/WarehouseResponse'
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missing_description:
                  summary: Missing Description
                  value:
                    success: false
                    message: "Missing required field: description"
                    data: null
                missing_number:
                  summary: Missing Number
                  value:
                    success: false
                    message: "Missing required field: number"
                    data: null
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /inventory/warehouses/{id}:
    get:
      tags:
        - Inventory
      summary: Get a specific warehouse
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Warehouse ID
          example: 1
      responses:
        '200':
          description: Warehouse details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/WarehouseResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Warehouse not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Inventory
      summary: Update a warehouse
      description: |
        Update an existing warehouse using English field names.
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Warehouse ID
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWarehouseRequest'
            examples:
              update_description:
                summary: Update Description
                value:
                  id: 1
                  description: "Updated Main Warehouse"
                  number: "001"
              update_all:
                summary: Update All Fields
                value:
                  id: 1
                  description: "Central Distribution Hub"
                  number: "001"
                  fiscalYear: 2025
      responses:
        '200':
          description: Warehouse updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Warehouse updated successfully"
                  data:
                    $ref: '#/components/schemas/WarehouseResponse'
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Warehouse not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Inventory - Status
  /inventory/status/:
    get:
      tags:
        - Inventory
      summary: Get inventory status
      description: |
        Get inventory status records with optional filtering and sorting. The API accepts both English and Danish field names for backward compatibility.
        
        **English Field Names:**
        - `inventory` - Warehouse/inventory number
        - `productId` - Product ID
        - `quantity` - Stock quantity
        - `location` - Primary location within warehouse
        - `variantId` - Product variant ID
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: orderBy
          in: query
          schema:
            type: string
            default: id
            enum: [id, inventory, productId, quantity, location, variantId]
          description: Field to order by
        - name: orderDirection
          in: query
          schema:
            type: string
            enum: [ASC, DESC]
            default: ASC
          description: Sort direction
        - name: field
          in: query
          schema:
            type: string
            enum: [id, inventory, productId, quantity, location, variantId]
          description: Field to filter by
          example: "productId"
        - name: value
          in: query
          schema:
            type: string
          description: Value to filter by
          example: "301"
        - name: inventoryNr
          in: query
          schema:
            type: integer
          description: Warehouse/inventory number to filter by
          example: 1
      responses:
        '200':
          description: List of inventory status records
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryStatusListResponse'
              examples:
                all_inventory:
                  summary: All Inventory Status
                  description: Get all inventory status records
                  value:
                    success: true
                    data:
                      - id: 1
                        inventory: 1
                        productId: 301
                        quantity: 100.0
                        location: "A1-01"
                        location2: ""
                        location3: ""
                        location4: ""
                        location5: ""
                        variantId: 0
                warehouse_inventory:
                  summary: Warehouse Specific Inventory
                  description: Get inventory for a specific warehouse
                  value:
                    success: true
                    data:
                      - id: 1
                        inventory: 1
                        productId: 301
                        quantity: 50.0
                        location: "A1-01"
                        variantId: 0
                      - id: 2
                        inventory: 1
                        productId: 302
                        quantity: 25.0
                        location: "A1-02"
                        variantId: 0
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Inventory
      summary: Create new inventory status
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInventoryStatusRequest'
            examples:
              basic_inventory:
                summary: Basic Inventory Status
                description: Create an inventory status with required fields only
                value:
                  inventory: 1
                  productId: 301
                  quantity: 100.0
              detailed_inventory:
                summary: Detailed Inventory Status
                description: Create an inventory status with all available fields
                value:
                  inventory: 1
                  productId: 301
                  quantity: 100.0
                  location: "A1-01"
                  location2: "B1-02"
                  variantId: 1
      responses:
        '201':
          description: Inventory status created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Inventory status created successfully"
                  data:
                    $ref: '#/components/schemas/InventoryStatusResponse'
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missing_fields:
                  summary: Missing Required Fields
                  value:
                    success: false
                    message: "Inventory, productId, and quantity are required fields."
                    data: null
                duplicate_record:
                  summary: Duplicate Record
                  value:
                    success: false
                    message: "Record with vare_id and lager already exists."
                    data: null
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /inventory/status/{id}:
    get:
      tags:
        - Inventory
      summary: Get specific inventory status
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Inventory status ID
          example: 1
      responses:
        '200':
          description: Inventory status details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/InventoryStatusResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Inventory status not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Inventory
      summary: Update inventory status
      description: |
        Update an existing inventory status record using English field names.
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Inventory status ID
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInventoryStatusRequest'
            examples:
              update_quantity:
                summary: Update Quantity
                value:
                  id: 1
                  quantity: 150.0
              update_location:
                summary: Update Location
                value:
                  id: 1
                  location: "B2-01"
                  location2: "B2-02"
              update_all:
                summary: Update All Fields
                value:
                  id: 1
                  inventory: 1
                  productId: 301
                  quantity: 200.0
                  location: "C3-01"
                  variantId: 2
      responses:
        '200':
          description: Inventory status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Inventory status updated successfully"
                  data:
                    $ref: '#/components/schemas/InventoryStatusResponse'
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Inventory status not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - Inventory
      summary: Adjust inventory quantities
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Inventory status ID
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryAdjustmentRequest'
            examples:
              add_stock:
                summary: Add Stock
                description: Add 25 units to current inventory
                value:
                  action: "adjust_quantity"
                  amount: 25.0
              remove_stock:
                summary: Remove Stock  
                description: Remove 10 units from current inventory
                value:
                  action: "adjust_quantity"
                  amount: -10.0
              set_stock:
                summary: Set Absolute Stock
                description: Set inventory to exactly 100 units
                value:
                  action: "set_quantity"
                  quantity: 100.0
      responses:
        '200':
          description: Inventory quantity adjusted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Inventory quantity adjusted successfully"
                  data:
                    $ref: '#/components/schemas/InventoryStatusResponse'
        '400':
          description: Bad request - invalid action or missing parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_action:
                  summary: Invalid Action
                  value:
                    success: false
                    message: "Invalid action specified"
                    data: null
                missing_parameter:
                  summary: Missing Parameter
                  value:
                    success: false
                    message: "Action parameter required for PATCH requests"
                    data: null
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Inventory status not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Product Groups
  /products/groups/:
    get:
      tags:
        - Product Groups
      summary: Get all product groups
      description: |
        Get all product groups with optional filtering and sorting. The API accepts both English and Danish field names for backward compatibility.
        
        **English Field Names:**
        - `codeNo` - Group code number
        - `description` - Group description
        - `fiscalYear` - Fiscal year
        - `reversePayment` - Reverse charge flag
        - `taxFree` - VAT exempt flag
        - `inventory` - Inventory tracked flag
        - `batch` - Batch tracking flag
        - `operation` - Operation flag
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: orderBy
          in: query
          schema:
            type: string
            default: codeNo
            enum: [id, codeNo, description, fiscalYear]
          description: Field to order by
          example: "codeNo"
        - name: orderDirection
          in: query
          schema:
            type: string
            enum: [ASC, DESC]
            default: ASC
          description: Sort direction
        - name: field
          in: query
          schema:
            type: string
            enum: [id, codeNo, description, fiscalYear]
          description: Field to filter by
          example: "description"
        - name: value
          in: query
          schema:
            type: string
          description: Value to filter by
          example: "Electronics"
      responses:
        '200':
          description: List of product groups
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductGroupListResponse'
              examples:
                all_groups:
                  summary: All Product Groups
                  description: Get all product groups with basic information
                  value:
                    success: true
                    data:
                      - id: 1
                        codeNo: 1
                        description: "Electronics"
                        fiscalYear: 2025
                        reversePayment: false
                        taxFree: false
                        inventory: true
                        batch: false
                        operation: false
                        accounts:
                          buyAccount: 
                            id: 1
                            kontonr: "4000"
                            beskrivelse: "Purchase Account"
                          sellAccount:
                            id: 2
                            kontonr: "1000"
                            beskrivelse: "Sales Account"
                          buyEuAccount: null
                          sellEuAccount: null
                          buyOutsideEuAccount: null
                          sellOutsideEuAccount: null
                      - id: 2
                        codeNo: 2
                        description: "Office Supplies"
                        fiscalYear: 2025
                        reversePayment: false
                        taxFree: false
                        inventory: true
                        batch: false
                        operation: false
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Product Groups
      summary: Create a new product group
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductGroupRequest'
            examples:
              basic_group:
                summary: Basic Product Group
                description: Create a product group with minimal required fields
                value:
                  codeNo: 1
                  description: "Electronics"
              detailed_group:
                summary: Detailed Product Group
                description: Create a product group with all available fields
                value:
                  codeNo: 1
                  description: "Electronics & Components"
                  reversePayment: false
                  taxFree: false
                  inventory: true
                  batch: false
                  operation: false
                  buyAccount: "4000"
                  sellAccount: "1000"
                  buyEuAccount: "4010"
                  sellEuAccount: "1010"
                  buyOutsideEuAccount: "4020"
                  sellOutsideEuAccount: "1020"
      responses:
        '201':
          description: Product group created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Product group created successfully"
                  data:
                    $ref: '#/components/schemas/ProductGroupResponse'
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missing_codeno:
                  summary: Missing Code Number
                  value:
                    success: false
                    message: "Code number is required"
                    data: null
                missing_description:
                  summary: Missing Description
                  value:
                    success: false
                    message: "Description is required"
                    data: null
                duplicate_codeno:
                  summary: Duplicate Code Number
                  value:
                    success: false
                    message: "Product group with code number '1' already exists"
                    data: null
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /products/groups/{id}:
    get:
      tags:
        - Product Groups
      summary: Get a specific product group
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Product group ID
          example: 1
      responses:
        '200':
          description: Product group details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/ProductGroupResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Product Groups
      summary: Update a product group
      description: |
        Update an existing product group using English field names.
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Product group ID
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductGroupRequest'
            examples:
              update_description:
                summary: Update Description
                value:
                  id: 1
                  description: "Updated Electronics"
              update_accounts:
                summary: Update Accounts
                value:
                  id: 1
                  description: "Electronics & Components"
                  buyAccount: "4005"
                  sellAccount: "1005"
              update_all:
                summary: Update All Fields
                value:
                  id: 1
                  codeNo: 1
                  description: "Electronics & Components"
                  reversePayment: false
                  taxFree: false
                  inventory: true
                  batch: true
                  operation: false
                  buyAccount: "4000"
                  sellAccount: "1000"
                  buyEuAccount: "4010"
                  sellEuAccount: "1010"
                  buyOutsideEuAccount: "4020"
                  sellOutsideEuAccount: "1020"
      responses:
        '200':
          description: Product group updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Product group updated successfully"
                  data:
                    $ref: '#/components/schemas/ProductGroupResponse'
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Product Groups
      summary: Delete a product group
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Product group ID
          example: 1
      responses:
        '200':
          description: Product group deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Product group deleted successfully"
        '400':
          description: Bad request - group may be referenced by products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                group_in_use:
                  summary: Group In Use
                  value:
                    success: false
                    message: "Cannot delete product group as it is referenced by existing products"
                    data: null
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Accounts Management
  /accounts/:
    get:
      tags:
        - Accounts
      summary: Get all accounts
      description: |
        Get all accounts with optional filtering and sorting. The API accepts both English and Danish field names for backward compatibility.
        
        **English Field Names:**
        - `accountNumber` - Account number
        - `description` - Account description
        - `accountType` - Account type
        - `vat` - VAT code
        - `fromAccount` - From account
        - `toAccount` - To account
        - `closed` - Closed status
        - `openingBalance` - Opening balance
        - `balance` - Current balance
        - `shortcut` - Account shortcut
        - `transferTo` - Transfer to account
        - `usage` - Account usage description
        - `contraAccount` - Contra account
        - `currency` - Currency ID
        - `exchangeRate` - Exchange rate
        - `mapTo` - Map to account
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: orderBy
          in: query
          schema:
            type: string
            default: accountNumber
            enum: [id, accountNumber, description, accountType, vat, closed, balance]
          description: Field to order by
          example: "accountNumber"
        - name: orderDirection
          in: query
          schema:
            type: string
            enum: [ASC, DESC]
            default: ASC
          description: Sort direction
        - name: field
          in: query
          schema:
            type: string
            enum: [id, accountNumber, description, accountType, vat, closed, balance]
          description: Field to filter by
          example: "description"
        - name: value
          in: query
          schema:
            type: string
          description: Value to filter by
          example: "Cash"
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
            maximum: 200
            minimum: 1
          description: Maximum number of accounts to return
          example: 20
      responses:
        '200':
          description: List of accounts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountListResponse'
              examples:
                all_accounts:
                  summary: All Accounts
                  description: Get all accounts with basic information
                  value:
                    success: true
                    data:
                      - id: 1
                        accountNumber: "1000"
                        description: "Cash in bank"
                        accountType: "A"
                        vat: "A25"
                        closed: "N"
                        openingBalance: 0.0
                        balance: 5000.0
                        shortcut: ""
                        usage: "General"
                      - id: 2
                        accountNumber: "4000"
                        description: "Purchase Account"
                        accountType: "E"
                        vat: "A25"
                        closed: "N"
                        openingBalance: 0.0
                        balance: -15000.0
                        shortcut: ""
                        usage: "Purchases"
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Accounts
      summary: Create a new account
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountRequest'
            examples:
              basic_account:
                summary: Basic Account
                description: Create an account with minimal required fields
                value:
                  accountNumber: "1500"
                  description: "Petty Cash"
              detailed_account:
                summary: Detailed Account
                description: Create an account with all available fields
                value:
                  accountNumber: "1500"
                  description: "Petty Cash Account"
                  accountType: "A"
                  vat: "A25"
                  fromAccount: 0
                  toAccount: 0
                  closed: "N"
                  openingBalance: 1000.0
                  balance: 1000.0
                  shortcut: "PC"
                  transferTo: 0
                  usage: "Daily cash operations"
                  contraAccount: 0
                  currency: 0
                  exchangeRate: 0.0
                  mapTo: 0
      responses:
        '201':
          description: Account created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Account created successfully"
                  data:
                    $ref: '#/components/schemas/AccountResponse'
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missing_account_number:
                  summary: Missing Account Number
                  value:
                    success: false
                    message: "Account number and description are required"
                    data: null
                duplicate_account:
                  summary: Duplicate Account
                  value:
                    success: false
                    message: "Account with number '1500' already exists"
                    data: null
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /accounts/{id}:
    get:
      tags:
        - Accounts
      summary: Get a specific account
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Account ID
          example: 1
      responses:
        '200':
          description: Account details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/AccountResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Accounts
      summary: Update an account
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Account ID
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccountRequest'
            examples:
              update_description:
                summary: Update Description
                value:
                  id: 1
                  description: "Updated Cash Account"
              update_balance:
                summary: Update Balance
                value:
                  id: 1
                  balance: 7500.0
                  usage: "Updated usage description"
              update_all:
                summary: Update All Fields
                value:
                  id: 1
                  accountNumber: "1000"
                  description: "Main Cash Account"
                  accountType: "A"
                  vat: "A25"
                  closed: "N"
                  openingBalance: 0.0
                  balance: 7500.0
                  shortcut: "MCA"
                  usage: "Primary cash operations"
                  contraAccount: 0
                  currency: 0
                  exchangeRate: 0.0
      responses:
        '200':
          description: Account updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Account updated successfully"
                  data:
                    $ref: '#/components/schemas/AccountResponse'
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Currencies Management (Read-only)
  /currencies/:
    get:
      tags:
        - Currencies
      summary: Get all currencies
      description: |
        Get all currencies with optional filtering and sorting. This is a read-only endpoint.
        
        **English Field Names:**
        - `description` - Currency description
        - `currencyCode` - Currency code (3-letter code like USD, EUR, DKK)
        - `exchangeRate` - Exchange rate against the base currency
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: orderBy
          in: query
          schema:
            type: string
            default: description
            enum: [id, description, currencyCode, exchangeRate]
          description: Field to order by
          example: "description"
        - name: orderDirection
          in: query
          schema:
            type: string
            enum: [ASC, DESC]
            default: ASC
          description: Sort direction
        - name: field
          in: query
          schema:
            type: string
            enum: [id, description, currencyCode, exchangeRate]
          description: Field to filter by
          example: "description"
        - name: value
          in: query
          schema:
            type: string
          description: Value to filter by
          example: "Danish Krone"
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
            maximum: 200
            minimum: 1
          description: Maximum number of currencies to return
          example: 20
      responses:
        '200':
          description: List of currencies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyListResponse'
              examples:
                all_currencies:
                  summary: All Currencies
                  description: Get all currencies with basic information
                  value:
                    success: true
                    data:
                      - description: "Danish Krone"
                        currencyCode: "DKK"
                        exchangeRate: 1.0
                      - description: "Euro"
                        currencyCode: "EUR"
                        exchangeRate: 0.85
                      - description: "US Dollar"
                        currencyCode: "USD"
                        exchangeRate: 1.1
                      - description: "British Pound"
                        currencyCode: "GBP"
                        exchangeRate: 0.75
                filtered_currencies:
                  summary: Filtered Currencies
                  description: Get currencies filtered by description
                  value:
                    success: true
                    data:
                      - description: "Danish Krone"
                        currencyCode: "DKK"
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /currencies/{id}:
    get:
      tags:
        - Currencies
      summary: Get a specific currency
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Currency ID
          example: 1
      responses:
        '200':
          description: Currency details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/CurrencyResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Currency not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Accounting Year
  /accountingYear/:
    get:
      tags:
        - Accounting Year
      summary: Get current fiscal year information
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
      responses:
        '200':
          description: Current fiscal year information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountingYearResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: No active fiscal year found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
# Attachment Management
  /attachment:
    get:
      tags:
        - Attachments
      summary: Get all files or a specific file
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: file
          in: query
          schema:
            type: string
          description: Filename to retrieve (optional)
          example: "document.pdf"
        - name: download
          in: query
          schema:
            type: boolean
          description: Set to true to download the file content
          example: true
      responses:
        '200':
          description: List of files or specific file details/content
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/AttachmentListResponse'
                  - $ref: '#/components/schemas/AttachmentResponse'
            application/octet-stream:
              schema:
                type: string
                format: binary
                description: File content when download=true
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Attachments
      summary: Upload a new file
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: File to upload
                filename:
                  type: string
                  description: Custom filename (optional)
                  example: "my_document.pdf"
            encoding:
              file:
                contentType: '*/*'
      responses:
        '201':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentUploadResponse'
        '400':
          description: Bad request - invalid file or upload error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error during upload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Attachments
      summary: Delete a file
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: file
          in: query
          required: true
          schema:
            type: string
          description: Filename to delete
          example: "document.pdf"
      responses:
        '200':
          description: File deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad request - filename required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error during deletion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  # VAT Management
  /vat/:
    get:
      tags:
        - VAT
      summary: Get all VAT items
      description: |
        Get all VAT items with optional filtering and sorting. The API accepts both English and Danish field names for backward compatibility.
        
        **English Field Names:**
        - `description` - VAT description
        - `vatCode` - VAT code
        - `number` - VAT number
        - `fiscalYear` - Fiscal year
        - `account` - Account ID
        - `rate` - VAT rate percentage
        - `contraAccount` - Contra account ID
        - `mapping` - Mapping information
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: orderBy
          in: query
          schema:
            type: string
            default: number
            enum: [id, number, description, vatCode, fiscalYear, rate]
          description: Field to order by
          example: "number"
        - name: orderDirection
          in: query
          schema:
            type: string
            enum: [ASC, DESC]
            default: ASC
          description: Sort direction
        - name: field
          in: query
          schema:
            type: string
            enum: [id, number, description, vatCode, fiscalYear, rate]
          description: Field to filter by
          example: "description"
        - name: value
          in: query
          schema:
            type: string
          description: Value to filter by
          example: "Standard VAT"
        - name: vatcode
          in: query
          schema:
            type: string
          description: VAT code to search for
          example: "A25"
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
            maximum: 200
            minimum: 1
          description: Maximum number of VAT items to return
          example: 20
      responses:
        '200':
          description: List of VAT items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VatListResponse'
              examples:
                all_vat_items:
                  summary: All VAT Items
                  description: Get all VAT items with basic information
                  value:
                    success: true
                    data:
                      - id: 1
                        description: "Standard VAT 25%"
                        vatCode: "A"
                        number: 25
                        fiscalYear: 2025
                        account: 1520
                        rate: 25.0
                        contraAccount: 0
                        mapping: ""
                      - id: 2
                        description: "Reduced VAT 5%"
                        vatCode: "B"
                        number: 5
                        fiscalYear: 2025
                        account: 1521
                        rate: 5.0
                        contraAccount: 0
                        mapping: ""
                filtered_by_vatcode:
                  summary: Filtered by VAT Code
                  description: Get VAT items filtered by VAT code
                  value:
                    success: true
                    data:
                      - id: 1
                        description: "Standard VAT 25%"
                        vatCode: "A"
                        number: 25
                        fiscalYear: 2025
                        account: 1520
                        rate: 25.0
                        contraAccount: 0
                        mapping: ""
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - VAT
      summary: Create a new VAT item
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVatRequest'
            examples:
              basic_vat:
                summary: Basic VAT Item
                description: Create a VAT item with minimal required fields
                value:
                  description: "Standard VAT 25%"
                  vatCode: "A"
                  number: 25
              detailed_vat:
                summary: Detailed VAT Item
                description: Create a VAT item with all available fields
                value:
                  description: "Standard VAT 25%"
                  vatCode: "A"
                  number: 25
                  account: 1520
                  rate: 25.0
                  contraAccount: 0
                  mapping: "EU-VAT"
      responses:
        '201':
          description: VAT item created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "VAT item created successfully"
                  data:
                    $ref: '#/components/schemas/VatResponse'
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missing_required_fields:
                  summary: Missing Required Fields
                  value:
                    success: false
                    message: "VAT code, number, and description are required"
                    data: null
                duplicate_vat_code:
                  summary: Duplicate VAT Code
                  value:
                    success: false
                    message: "VAT item with code 'A25' already exists"
                    data: null
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /vat/{id}:
    get:
      tags:
        - VAT
      summary: Get a specific VAT item
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: VAT item ID
          example: 1
      responses:
        '200':
          description: VAT item details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/VatResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: VAT item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - VAT
      summary: Update a VAT item
      description: |
        Update an existing VAT item using English field names.
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: VAT item ID
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVatRequest'
            examples:
              update_description:
                summary: Update Description
                value:
                  id: 1
                  description: "Updated Standard VAT 25%"
              update_rate:
                summary: Update Rate
                value:
                  id: 1
                  rate: 27.0
              update_all:
                summary: Update All Fields
                value:
                  id: 1
                  description: "Standard VAT 25%"
                  vatCode: "A"
                  number: 25
                  account: 1520
                  rate: 25.0
                  contraAccount: 0
                  mapping: "Updated mapping"
      responses:
        '200':
          description: VAT item updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "VAT item updated successfully"
                  data:
                    $ref: '#/components/schemas/VatResponse'
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: VAT item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - VAT
      summary: Delete a VAT item
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: VAT item ID
          example: 1
      responses:
        '200':
          description: VAT item deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "VAT item deleted successfully"
        '400':
          description: Bad request - VAT item may be referenced by other records
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                vat_in_use:
                  summary: VAT Item In Use
                  value:
                    success: false
                    message: "Cannot delete VAT item as it is referenced by existing transactions"
                    data: null
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: VAT item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    DatabaseAuth:
      type: apiKey
      in: header
      name: x-db
      description: Database identifier
    UserAuth:
      type: apiKey
      in: header
      name: x-saldiuser
      description: User identifier
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      description: API key for authentication

  parameters:
    DatabaseHeader:
      name: x-db
      in: header
      required: true
      description: Database identifier
      schema:
        type: string
        example: "mycompany_db"
    UserHeader:
      name: x-saldiuser
      in: header
      required: true
      description: User identifier
      schema:
        type: string
        example: "user123"
    ApiKeyHeader:
      name: Authorization
      in: header
      required: true
      description: API key for authentication
      schema:
        type: string
        example: "your-api-key-here"

  schemas:
    # Order Schemas
    CreateOrderRequest:
      type: object
      description: |
        Create a new order. The API accepts both English and Danish field names for backward compatibility.
        
        **Required for new customers:**
        - `companyName` (or `firmanavn`) - Company name
        - `phone` (or `telefon`) - Phone number  
        - `email` - Email address
        - `vatRate` (or `momssats`) - VAT rate
        
        **Required for existing customers:**
        - `accountId` (or `konto_id`) - Existing customer account ID
        - `vatRate` (or `momssats`) - VAT rate
        
        **English to Danish Field Mapping:**
        - `accountId` → `konto_id`
        - `companyName` → `firmanavn`
        - `phone` → `telefon`
        - `vatRate` → `momssats`
        - `orderNumber` → `ordrenr`
        - `orderDate` → `ordredate`
        - `invoiceDate` → `fakturadate`
        - `paid` → `betalt`
        - `costPrice` → `kostpris`
        - `vat` → `moms`
        - `currency` → `valuta`
        - `currencyRate` → `valutakurs`
        - `paymentTerms` → `betalingsbet`
        - `paymentDays` → `betalingsdage`
        - `accountNumber` → `kontonr`
        - `reference` → `ref`
        - `type` → `art`
        - `address1` → `addr1`
        - `address2` → `addr2`
        - `postalCode` → `postnr`
        - `city` → `bynavn`
        - `country` → `land`
        - `deliveryName` → `lev_navn`
        - `deliveryAddress1` → `lev_addr1`
        - `deliveryAddress2` → `lev_addr2`
        - `deliveryPostalCode` → `lev_postnr`
        - `deliveryCity` → `lev_bynavn`
        - `deliveryCountry` → `lev_land`
        - `cvrNo` → `cvrnr`
        - `customerGroup` → `kundegruppe`
      properties:
        # Customer identification (either accountId OR customer details required)
        accountId:
          type: integer
          description: Existing customer/supplier account ID (use this for existing customers)
          example: 201
        companyName:
          type: string
          description: Company name (required for new customers)
          example: "ACME Corporation"
        phone:
          type: string
          description: Phone number (required for new customers)
          example: "+45 12345678"
        email:
          type: string
          format: email
          description: Email address (required for new customers)
          example: "contact@acme.com"
        
        # Required fields
        vatRate:
          type: number
          format: float
          description: VAT rate percentage (required)
          example: 25.0
        
        # Financial information
        sum:
          type: number
          format: float
          description: Order total amount
          example: 1250.00
        costPrice:
          type: number
          format: float
          description: Cost price
          example: 1000.00
        vat:
          type: number
          format: float
          description: VAT amount
          example: 250.00
        currency:
          type: string
          description: Currency code (defaults to base currency if not provided)
          example: "DKK"
        currencyRate:
          type: number
          format: float
          description: Currency exchange rate (auto-calculated if not provided)
          example: 100.0
        
        # Payment terms
        paymentTerms:
          type: string
          description: Payment terms (defaults to 'netto' or customer's default)
          example: "netto"
        paymentDays:
          type: integer
          description: Payment days (defaults to 8 or customer's default)
          example: 30
        
        # Billing address
        address1:
          type: string
          description: Address line 1
          example: "Main Street 123"
        address2:
          type: string
          description: Address line 2
          example: "Suite 456"
        postalCode:
          type: string
          description: Postal code
          example: "1234"
        city:
          type: string
          description: City name
          example: "Copenhagen"
        country:
          type: string
          description: Country
          example: "Denmark"
        
        # Delivery address
        deliveryName:
          type: string
          description: Delivery contact name
          example: "ACME Warehouse"
        deliveryAddress1:
          type: string
          description: Delivery address 1
          example: "Industrial Road 789"
        deliveryAddress2:
          type: string
          description: Delivery address 2
          example: "Building B"
        deliveryPostalCode:
          type: string
          description: Delivery postal code
          example: "5678"
        deliveryCity:
          type: string
          description: Delivery city
          example: "Aarhus"
        deliveryCountry:
          type: string
          description: Delivery country
          example: "Denmark"
        
        # Other customer information
        ean:
          type: string
          description: EAN number
          example: "1234567890123"
        cvrNo:
          type: string
          description: CVR number
          example: "12345678"
        customerGroup:
          type: integer
          description: Customer group (defaults to 1 for new customers)
          example: 1
        
        # Order information
        orderDate:
          type: string
          format: date-time
          description: Order date (defaults to current date/time)
          example: "2025-07-31T10:30:00"
        invoiceDate:
          type: string
          format: date-time
          description: Invoice date (defaults to current date/time)
          example: "2025-07-31T10:30:00"
        notes:
          type: string
          description: Order notes
          example: "Urgent delivery required"
        paid:
          type: boolean
          description: Payment status
          example: false
        type:
          type: string
          description: Order type ('DO' for debitor, 'KO' for creditor)
          example: "DO"
          enum: ["DO", "KO"]
        status:
          type: integer
          description: Order status (defaults to 0)
          example: 0
        
        # Auto-generated fields (usually not provided in request)
        accountNumber:
          type: string
          description: Account number (auto-generated for new customers)
          example: "1001"
        reference:
          type: string
          description: Reference/user (auto-set from x-saldiuser header)
          example: "user123"
        orderNumber:
          type: integer
          description: Order number (auto-generated)
          example: 2025001
        
        # Danish field names (for backward compatibility)
        konto_id:
          type: integer
          description: "[Danish] Existing customer account ID"
          example: 201
        firmanavn:
          type: string
          description: "[Danish] Company name"
          example: "ACME Corporation"
        telefon:
          type: string
          description: "[Danish] Phone number"
          example: "+45 12345678"
        momssats:
          type: number
          format: float
          description: "[Danish] VAT rate"
          example: 25.0
        kostpris:
          type: number
          format: float
          description: "[Danish] Cost price"
          example: 1000.00
        moms:
          type: number
          format: float
          description: "[Danish] VAT amount"
          example: 250.00
        valuta:
          type: string
          description: "[Danish] Currency"
          example: "DKK"
        valutakurs:
          type: number
          format: float
          description: "[Danish] Exchange rate"
          example: 100.0
        betalingsbet:
          type: string
          description: "[Danish] Payment terms"
          example: "netto"
        betalingsdage:
          type: integer
          description: "[Danish] Payment days"
          example: 8
        kontonr:
          type: string
          description: "[Danish] Account number"
          example: "1001"
        ref:
          type: string
          description: "[Danish] Reference"
          example: "user123"
        art:
          type: string
          description: "[Danish] Order type"
          example: "DO"
          enum: ["DO", "KO"]
        addr1:
          type: string
          description: "[Danish] Address line 1"
          example: "Main Street 123"
        addr2:
          type: string
          description: "[Danish] Address line 2"
          example: "Suite 456"
        postnr:
          type: string
          description: "[Danish] Postal code"
          example: "1234"
        bynavn:
          type: string
          description: "[Danish] City"
          example: "Copenhagen"
        land:
          type: string
          description: "[Danish] Country"
          example: "Denmark"
        lev_navn:
          type: string
          description: "[Danish] Delivery name"
          example: "ACME Warehouse"
        lev_addr1:
          type: string
          description: "[Danish] Delivery address 1"
          example: "Industrial Road 789"
        lev_addr2:
          type: string
          description: "[Danish] Delivery address 2"
          example: "Building B"
        lev_postnr:
          type: string
          description: "[Danish] Delivery postal code"
          example: "5678"
        lev_bynavn:
          type: string
          description: "[Danish] Delivery city"
          example: "Aarhus"
        lev_land:
          type: string
          description: "[Danish] Delivery country"
          example: "Denmark"
        cvrnr:
          type: string
          description: "[Danish] CVR number"
          example: "12345678"
        kundegruppe:
          type: integer
          description: "[Danish] Customer group"
          example: 1
        ordredate:
          type: string
          format: date-time
          description: "[Danish] Order date"
          example: "2025-07-31T10:30:00"
        fakturadate:
          type: string
          format: date-time
          description: "[Danish] Invoice date"
          example: "2025-07-31T10:30:00"
        betalt:
          type: boolean
          description: "[Danish] Paid status"
          example: false
        ordrenr:
          type: integer
          description: "[Danish] Order number"
          example: 2025001
      
    OrderListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/OrderResponse'
          description: Array of order objects
        message:
          type: string
          example: "Orders retrieved successfully"

    OrderResponse:
        type: object
        properties:
          id:
            type: integer
            description: Order ID
            example: 1001
          accountId:
            type: integer
            description: Account ID
            example: 201
          companyName:
            type: string
            description: Company name
            example: "ACME Corporation"
          phone:
            type: string
            description: Phone number
            example: "+45 12345678"
          email:
            type: string
            description: Email address
            example: "contact@acme.com"
          vatRate:
            type: number
            format: float
            description: VAT rate
            example: 25.0
          address:
            type: object
            description: Billing address
            properties:
              addr1:
                type: string
                example: "Main Street 123"
              addr2:
                type: string
                example: "Suite 456"
              zipcode:
                type: string
                example: "1234"
              city:
                type: string
                example: "Copenhagen"
              country:
                type: string
                example: "Denmark"
          delivery:
            type: object
            description: Delivery address
            properties:
              name:
                type: string
                example: "ACME Warehouse"
              addr1:
                type: string
                example: "Industrial Road 789"
              addr2:
                type: string
                example: "Building B"
              zipcode:
                type: string
                example: "5678"
              city:
                type: string
                example: "Aarhus"
              country:
                type: string
                example: "Denmark"
          ean:
            type: string
            description: EAN number
            example: "1234567890123"
          cvr:
            type: string
            description: CVR number
            example: "12345678"
          orderDate:
            type: string
            format: date
            description: Order date
            example: "2025-06-20"
          invoiceDate:
            type: string
            format: date
            nullable: true
            description: Invoice date
            example: "2025-06-21"
          notes:
            type: string
            description: Order notes
            example: "Urgent delivery required"
          paid:
            type: boolean
            description: Payment status
            example: false
          paymentInfo:
            type: object
            description: Payment information
            properties:
              paymentTerms:
                type: string
                example: "Net 30"
              paymentDays:
                type: integer
                example: 30
          economic:
            type: object
            description: Economic information
            properties:
              sum:
                type: number
                format: float
                example: 1250.00
              costPrice:
                type: number
                format: float
                example: 1000.00
              vat:
                type: number
                format: float
                example: 250.00
              currency:
                type: string
                example: "DKK"
              currencyRate:
                type: number
                format: float
                example: 1.0
          accountNumber:
            type: string
            description: Account number
            example: "1000"
          reference:
            type: string
            description: Reference/user
            example: "user123"
          status:
            type: integer
            description: Order status
            example: 0
          orderNo:
            type: integer
            description: Order number
            example: 2025001

    # Order Line Schemas
    CreateOrderLineRequest:
      type: object
      required:
        - ordre_id
      properties:
        ordre_id:
          type: integer
          description: Order ID
          example: 1001
        varenr:
          type: string
          description: Product number
          example: "PROD001"
        antal:
          type: number
          format: float
          description: Quantity
          example: 5.0
        pris:
          type: number
          format: float
          description: Price
          example: 250.00
        rabat:
          type: number
          format: float
          description: Discount
          example: 0.0
        beskrivelse:
          type: string
          description: Description
          example: "Premium Product"
        momsfri:
          type: integer
          description: VAT exempt flag
          example: 0
        procent:
          type: number
          format: float
          description: Percentage
          example: 25.0

    OrderLineResponse:
      type: object
      properties:
        id:
          type: integer
          example: 5001
        ordre_id:
          type: integer
          example: 1001
        vare_id:
          type: integer
          example: 301
        varenr:
          type: string
          example: "PROD001"
        beskrivelse:
          type: string
          example: "Premium Product"
        antal:
          type: number
          format: float
          example: 5.0
        pris:
          type: number
          format: float
          example: 250.00
        rabat:
          type: number
          format: float
          example: 0.0

    OrderLineListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/OrderLineResponse'

    # Customer Schemas
    CreateCustomerRequest:
      type: object
      required:
        - companyName
        - phone
        - email
      properties:
        companyName:
          type: string
          description: Company name
          example: "ACME Corporation"
        phone:
          type: string
          description: Phone number
          example: "+45 12345678"
        email:
          type: string
          format: email
          description: Email address
          example: "contact@acme.com"
        firstName:
          type: string
          description: First name
          example: "John"
        lastName:
          type: string
          description: Last name
          example: "Doe"
        address1:
          type: string
          description: Primary address
          example: "Main Street 123"
        address2:
          type: string
          description: Secondary address
          example: "Suite 456"
        postalCode:
          type: string
          description: Postal code
          example: "1234"
        city:
          type: string
          description: City
          example: "Copenhagen"
        country:
          type: string
          description: Country
          example: "Denmark"
        vatNumber:
          type: string
          description: VAT number
          example: "DK12345678"
        bankName:
          type: string
          description: Bank name
          example: "Danske Bank"
        bankReg:
          type: string
          description: Bank registration number
          example: "1234"
        bankAccount:
          type: string
          description: Bank account number
          example: "567890123"
        paymentTerms:
          type: string
          description: Payment terms
          example: "Net 30"
        paymentDays:
          type: integer
          description: Payment days
          example: 30
        contact:
          type: string
          description: Contact person
          example: "Jane Smith"
        notes:
          type: string
          description: Additional notes
          example: "Important customer"
        group:
          type: integer
          description: Customer group
          example: 1
        deliveryCompanyName:
          type: string
          description: Delivery company name
          example: "ACME Warehouse"
        deliveryAddress1:
          type: string
          description: Delivery address line 1
          example: "Warehouse Street 789"
        deliveryCity:
          type: string
          description: Delivery city
          example: "Aarhus"
        deliveryPhone:
          type: string
          description: Delivery phone
          example: "+45 87654321"

    UpdateCustomerRequest:
      allOf:
        - $ref: '#/components/schemas/CreateCustomerRequest'
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              description: Customer ID
              example: 201

    CustomerResponse:
      type: object
      properties:
        id:
          type: integer
          example: 201
        firmanavn:
          type: string
          example: "ACME Corporation"
        tlf:
          type: string
          example: "+45 12345678"
        email:
          type: string
          example: "contact@acme.com"
        addr1:
          type: string
          example: "Main Street 123"
        addr2:
          type: string
          example: "Suite 456"
        postnr:
          type: string
          example: "1234"
        bynavn:
          type: string
          example: "Copenhagen"
        cvrnr:
          type: string
          example: "12345678"
        land:
          type: string
          example: "Denmark"
        art:
          type: string
          example: "D"

    CustomerListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/CustomerResponse'

    # Product Schemas
    CreateProductRequest:
      type: object
      required:
        - sku
      properties:
        sku:
          type: string
          description: Product SKU/number
          example: "PROD001"
          minLength: 1
          maxLength: 50
        barcode:
          type: string
          description: Product barcode
          example: "1234567890123"
          maxLength: 50
        description:
          type: string
          description: Product description
          example: "Premium Product"
          maxLength: 255
        unit:
          type: string
          description: Primary unit of measure
          example: "pcs"
          maxLength: 10
        unit2:
          type: string
          description: Secondary unit of measure
          example: "box"
          maxLength: 10
        salesPrice:
          type: number
          format: float
          description: Sales price
          example: 250.00
          minimum: 0
        costPrice:
          type: number
          format: float
          description: Cost price
          example: 200.00
          minimum: 0
        notes:
          type: string
          description: Product notes
          example: "High quality product"
          maxLength: 500
        serialNumber:
          type: string
          description: Serial number
          example: "SN123456"
          maxLength: 50
        collectionOfItems:
          type: string
          description: Collection of items flag
          example: "N"
          enum: ["Y", "N"]
        partialItem:
          type: string
          description: Partial item flag
          example: "N"
          enum: ["Y", "N"]
        minInventory:
          type: number
          format: float
          description: Minimum inventory level
          example: 10.0
          minimum: 0
        maxInventory:
          type: number
          format: float
          description: Maximum inventory level
          example: 100.0
          minimum: 0
        location:
          type: string
          description: Default storage location
          example: "A1-01"
          maxLength: 20
        group:
          type: integer
          description: Product group ID
          example: 1
          minimum: 0
        netweight:
          type: number
          format: float
          description: Net weight
          example: 1.2
          minimum: 0
        netweightunit:
          type: string
          description: Net weight unit
          example: "kg"
          maxLength: 10
        grossweight:
          type: number
          format: float
          description: Gross weight
          example: 1.5
          minimum: 0
        grossweightunit:
          type: string
          description: Gross weight unit
          example: "kg"
          maxLength: 10
        length:
          type: number
          format: float
          description: Product length
          example: 15.8
          minimum: 0
        width:
          type: number
          format: float
          description: Product width
          example: 10.5
          minimum: 0
        height:
          type: number
          format: float
          description: Product height
          example: 5.2
          minimum: 0
        colli_webfreight:
          type: number
          format: float
          description: Web freight colli value
          example: 0.0
          minimum: 0

    UpdateProductRequest:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          description: Product ID
          example: 301
          minimum: 1
        sku:
          type: string
          description: Product SKU/number
          example: "PROD001"
          minLength: 1
          maxLength: 50
        barcode:
          type: string
          description: Product barcode
          example: "1234567890123"
          maxLength: 50
        description:
          type: string
          description: Product description
          example: "Premium Product"
          maxLength: 255
        unit:
          type: string
          description: Primary unit of measure
          example: "pcs"
          maxLength: 10
        unit2:
          type: string
          description: Secondary unit of measure
          example: "box"
          maxLength: 10
        salesPrice:
          type: number
          format: float
          description: Sales price
          example: 250.00
          minimum: 0
        costPrice:
          type: number
          format: float
          description: Cost price
          example: 200.00
          minimum: 0
        notes:
          type: string
          description: Product notes
          example: "High quality product"
          maxLength: 500
        serialNumber:
          type: string
          description: Serial number
          example: "SN123456"
          maxLength: 50
        collectionOfItems:
          type: string
          description: Collection of items flag
          example: "N"
          enum: ["Y", "N"]
        partialItem:
          type: string
          description: Partial item flag
          example: "N"
          enum: ["Y", "N"]
        minInventory:
          type: number
          format: float
          description: Minimum inventory level
          example: 10.0
          minimum: 0
        maxInventory:
          type: number
          format: float
          description: Maximum inventory level
          example: 100.0
          minimum: 0
        location:
          type: string
          description: Default storage location
          example: "A1-01"
          maxLength: 20
        group:
          type: integer
          description: Product group ID
          example: 1
          minimum: 0
        netweight:
          type: number
          format: float
          description: Net weight
          example: 1.2
          minimum: 0
        netweightunit:
          type: string
          description: Net weight unit
          example: "kg"
          maxLength: 10
        grossweight:
          type: number
          format: float
          description: Gross weight
          example: 1.5
          minimum: 0
        grossweightunit:
          type: string
          description: Gross weight unit
          example: "kg"
          maxLength: 10
        length:
          type: number
          format: float
          description: Product length
          example: 15.8
          minimum: 0
        width:
          type: number
          format: float
          description: Product width
          example: 10.5
          minimum: 0
        height:
          type: number
          format: float
          description: Product height
          example: 5.2
          minimum: 0
        colli_webfreight:
          type: number
          format: float
          description: Web freight colli value
          example: 0.0
          minimum: 0

    ProductResponse:
      type: object
      properties:
        id:
          type: integer
          description: Product ID
          example: 301
        sku:
          type: string
          description: Product SKU/number
          example: "PROD001"
        barcode:
          type: string
          description: Product barcode
          example: "1234567890123"
        description:
          type: string
          description: Product description
          example: "Premium Product"
        unit:
          type: string
          description: Primary unit of measure
          example: "pcs"
        unit2:
          type: string
          description: Secondary unit of measure
          example: "box"
        salesPrice:
          type: number
          format: float
          description: Sales price
          example: 250.00
        costPrice:
          type: number
          format: float
          description: Cost price
          example: 200.00
        notes:
          type: string
          description: Product notes
          example: "High quality product"
        serialNumber:
          type: string
          description: Serial number
          example: "SN123456"
        collectionOfItems:
          type: string
          description: Collection of items flag
          example: "N"
        partialItem:
          type: string
          description: Partial item flag
          example: "N"
        minInventory:
          type: number
          format: float
          description: Minimum inventory level
          example: 10.0
        maxInventory:
          type: number
          format: float
          description: Maximum inventory level
          example: 100.0
        location:
          type: string
          description: Default storage location
          example: "A1-01"
        group:
          type: integer
          description: Product group ID
          example: 1
        netweight:
          type: number
          format: float
          description: Net weight
          example: 1.2
        netweightunit:
          type: string
          description: Net weight unit
          example: "kg"
        grossweight:
          type: number
          format: float
          description: Gross weight
          example: 1.5
        grossweightunit:
          type: string
          description: Gross weight unit
          example: "kg"
        length:
          type: number
          format: float
          description: Product length
          example: 15.8
        width:
          type: number
          format: float
          description: Product width
          example: 10.5
        height:
          type: number
          format: float
          description: Product height
          example: 5.2
        colli_webfreight:
          type: number
          format: float
          description: Web freight colli value
          example: 0.0

    ProductListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProductResponse'
          description: Array of product objects
        message:
          type: string
          example: "Products retrieved successfully"

    # Warehouse Schemas
    CreateWarehouseRequest:
      type: object
      required:
        - description
        - number
      properties:
        description:
          type: string
          description: Warehouse description
          example: "Main Warehouse"
          minLength: 1
          maxLength: 255
        number:
          type: string
          description: Warehouse number/code
          example: "001"
          pattern: "^[A-Za-z0-9_-]+$"
        fiscalYear:
          type: integer
          description: Fiscal year
          example: 2025
          minimum: 2000
          maximum: 2100

    UpdateWarehouseRequest:
      type: object
      required:
        - id
        - description
        - number
      properties:
        id:
          type: integer
          description: Warehouse ID
          example: 1
          minimum: 1
        description:
          type: string
          description: Warehouse description
          example: "Updated Main Warehouse"
          minLength: 1
          maxLength: 255
        number:
          type: string
          description: Warehouse number/code
          example: "001"
          pattern: "^[A-Za-z0-9_-]+$"
        fiscalYear:
          type: integer
          description: Fiscal year
          example: 2025
          minimum: 2000
          maximum: 2100

    WarehouseResponse:
      type: object
      properties:
        id:
          type: integer
          description: Warehouse ID
          example: 1
        description:
          type: string
          description: Warehouse description
          example: "Main Warehouse"
        number:
          type: string
          description: Warehouse number/code
          example: "001"
        fiscalYear:
          type: integer
          description: Fiscal year
          example: 2025
        inventory:
          type: object
          nullable: true
          description: Associated inventory status (when productId is provided)
          properties:
            id:
              type: integer
              example: 1
            warehouseNumber:
              type: string
              example: "001"
            productId:
              type: integer
              example: 301
            quantity:
              type: number
              format: float
              example: 100.0
            location:
              type: string
              example: "A1-01"
            variantId:
              type: integer
              example: 1

    WarehouseListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/WarehouseResponse'
          description: Array of warehouse objects
        message:
          type: string
          example: "Warehouses retrieved successfully"
          
# VAT Schemas
    CreateVatRequest:
      type: object
      required:
        - description
        - vatCode
        - number
      properties:
        description:
          type: string
          description: VAT description
          example: "Standard VAT 25%"
          minLength: 1
          maxLength: 255
        vatCode:
          type: string
          description: VAT code (single letter)
          example: "A"
          pattern: "^[A-Z]$"
        number:
          type: integer
          description: VAT number/rate identifier
          example: 25
          minimum: 0
          maximum: 100
        account:
          type: integer
          description: Associated account ID
          example: 1520
          minimum: 0
        rate:
          type: number
          format: float
          description: VAT rate percentage
          example: 25.0
          minimum: 0
          maximum: 100
        contraAccount:
          type: integer
          description: Contra account ID
          example: 0
          minimum: 0
        mapping:
          type: string
          description: Mapping information
          example: ""
          maxLength: 255

    UpdateVatRequest:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          description: VAT item ID
          example: 1
          minimum: 1
        description:
          type: string
          description: VAT description
          example: "Standard VAT 25%"
          minLength: 1
          maxLength: 255
        vatCode:
          type: string
          description: VAT code (single letter)
          example: "A"
          pattern: "^[A-Z]$"
        number:
          type: integer
          description: VAT number/rate identifier
          example: 25
          minimum: 0
          maximum: 100
        account:
          type: integer
          description: Associated account ID
          example: 1520
          minimum: 0
        rate:
          type: number
          format: float
          description: VAT rate percentage
          example: 25.0
          minimum: 0
          maximum: 100
        contraAccount:
          type: integer
          description: Contra account ID
          example: 0
          minimum: 0
        mapping:
          type: string
          description: Mapping information
          example: ""
          maxLength: 255

    VatResponse:
      type: object
      properties:
        id:
          type: integer
          description: VAT item ID
          example: 1
        description:
          type: string
          description: VAT description
          example: "Standard VAT 25%"
        vatCode:
          type: string
          description: VAT code
          example: "A"
        number:
          type: integer
          description: VAT number/rate identifier
          example: 25
        fiscalYear:
          type: integer
          description: Fiscal year
          example: 2025
        account:
          type: integer
          description: Associated account ID
          example: 1520
        rate:
          type: number
          format: float
          description: VAT rate percentage
          example: 25.0
        contraAccount:
          type: integer
          description: Contra account ID
          example: 0
        mapping:
          type: string
          description: Mapping information
          example: ""

    VatListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/VatResponse'
          description: Array of VAT objects
        message:
          type: string
          example: "VAT items retrieved successfully"

        # Inventory Status Schemas
    CreateInventoryStatusRequest:
      type: object
      required:
        - inventory
        - productId
        - quantity
      properties:
        inventory:
          type: integer
          description: Warehouse/inventory number
          example: 1
        productId:
          type: integer
          description: Product ID
          example: 301
        quantity:
          type: number
          format: float
          description: Stock quantity
          example: 100.0
        location:
          type: string
          description: Primary location within warehouse
          example: "A1-01"
        location2:
          type: string
          description: Secondary location
          example: "B1-02"
        location3:
          type: string
          description: Third location
          example: "C1-03"
        location4:
          type: string
          description: Fourth location
          example: "D1-04"
        location5:
          type: string
          description: Fifth location
          example: "E1-05"
        variantId:
          type: integer
          description: Product variant ID
          example: 1

    UpdateInventoryStatusRequest:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          description: Inventory status ID
          example: 1
        inventory:
          type: integer
          description: Warehouse/inventory number
          example: 1
        productId:
          type: integer
          description: Product ID
          example: 301
        quantity:
          type: number
          format: float
          description: Stock quantity
          example: 100.0
        location:
          type: string
          description: Primary location within warehouse
          example: "A1-01"
        location2:
          type: string
          description: Secondary location
          example: "B1-02"
        location3:
          type: string
          description: Third location
          example: "C1-03"
        location4:
          type: string
          description: Fourth location
          example: "D1-04"
        location5:
          type: string
          description: Fifth location
          example: "E1-05"
        variantId:
          type: integer
          description: Product variant ID
          example: 1

    InventoryAdjustmentRequest:
      type: object
      required:
        - action
      properties:
        action:
          type: string
          enum: [adjust_quantity, set_quantity]
          description: Type of adjustment
          example: "adjust_quantity"
        amount:
          type: number
          format: float
          description: Amount to adjust (for adjust_quantity) - can be positive or negative
          example: 10.0
        quantity:
          type: number
          format: float
          description: New quantity to set (for set_quantity)
          example: 50.0

    InventoryStatusResponse:
      type: object
      properties:
        id:
          type: integer
          description: Inventory status ID
          example: 1
        inventory:
          type: integer
          description: Warehouse/inventory number
          example: 1
        productId:
          type: integer
          description: Product ID
          example: 301
        quantity:
          type: number
          format: float
          description: Current stock quantity
          example: 100.0
        location:
          type: string
          description: Primary location within warehouse
          example: "A1-01"
        location2:
          type: string
          description: Secondary location
          example: "B1-02"
        location3:
          type: string
          description: Third location
          example: "C1-03"
        location4:
          type: string
          description: Fourth location
          example: "D1-04"
        location5:
          type: string
          description: Fifth location
          example: "E1-05"
        variantId:
          type: integer
          description: Product variant ID
          example: 1

    InventoryStatusListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/InventoryStatusResponse'
          description: Array of inventory status objects

    # Currency Schemas (Read-only)
    CurrencyResponse:
      type: object
      properties:
        description:
          type: string
          description: Currency description
          example: "Danish Krone"
        currencyCode:
          type: string
          description: Currency code (3-letter ISO code)
          example: "DKK"

    CurrencyListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/CurrencyResponse'
          description: Array of currency objects
        message:
          type: string
          example: "Currencies retrieved successfully"

    # Product Group Schemas
    CreateProductGroupRequest:
      type: object
      required:
        - codeNo
        - description
      properties:
        codeNo:
          type: integer
          description: Group code number
          example: 1
          minimum: 1
        description:
          type: string
          description: Group description
          example: "Electronics"
          minLength: 1
          maxLength: 255
        reversePayment:
          type: boolean
          description: Reverse charge flag
          example: false
        taxFree:
          type: boolean
          description: VAT exempt flag
          example: false
        inventory:
          type: boolean
          description: Inventory tracked flag
          example: true
        batch:
          type: boolean
          description: Batch tracking flag
          example: false
        operation:
          type: boolean
          description: Operation flag
          example: false
        buyAccount:
          type: string
          description: Purchase account number
          example: "4000"
          pattern: "^[0-9]+$"
        sellAccount:
          type: string
          description: Sales account number
          example: "1000"
          pattern: "^[0-9]+$"
        buyEuAccount:
          type: string
          description: EU purchase account number
          example: "4010"
          pattern: "^[0-9]+$"
        sellEuAccount:
          type: string
          description: EU sales account number
          example: "1010"
          pattern: "^[0-9]+$"
        buyOutsideEuAccount:
          type: string
          description: Non-EU purchase account number
          example: "4020"
          pattern: "^[0-9]+$"
        sellOutsideEuAccount:
          type: string
          description: Non-EU sales account number
          example: "1020"
          pattern: "^[0-9]+$"

    UpdateProductGroupRequest:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          description: Product group ID
          example: 1
          minimum: 1
        codeNo:
          type: integer
          description: Group code number
          example: 1
          minimum: 1
        description:
          type: string
          description: Group description
          example: "Electronics"
          minLength: 1
          maxLength: 255
        reversePayment:
          type: boolean
          description: Reverse charge flag
          example: false
        taxFree:
          type: boolean
          description: VAT exempt flag
          example: false
        inventory:
          type: boolean
          description: Inventory tracked flag
          example: true
        batch:
          type: boolean
          description: Batch tracking flag
          example: false
        operation:
          type: boolean
          description: Operation flag
          example: false
        buyAccount:
          type: string
          description: Purchase account number
          example: "4000"
          pattern: "^[0-9]+$"
        sellAccount:
          type: string
          description: Sales account number
          example: "1000"
          pattern: "^[0-9]+$"
        buyEuAccount:
          type: string
          description: EU purchase account number
          example: "4010"
          pattern: "^[0-9]+$"
        sellEuAccount:
          type: string
          description: EU sales account number
          example: "1010"
          pattern: "^[0-9]+$"
        buyOutsideEuAccount:
          type: string
          description: Non-EU purchase account number
          example: "4020"
          pattern: "^[0-9]+$"
        sellOutsideEuAccount:
          type: string
          description: Non-EU sales account number
          example: "1020"
          pattern: "^[0-9]+$"

    ProductGroupResponse:
      type: object
      properties:
        id:
          type: integer
          description: Product group ID
          example: 1
        codeNo:
          type: integer
          description: Group code number
          example: 1
        description:
          type: string
          description: Group description
          example: "Electronics"
        fiscalYear:
          type: integer
          description: Fiscal year
          example: 2025
        reversePayment:
          type: boolean
          description: Reverse charge flag
          example: false
        taxFree:
          type: boolean
          description: VAT exempt flag
          example: false
        inventory:
          type: boolean
          description: Inventory tracked flag
          example: true
        batch:
          type: boolean
          description: Batch tracking flag
          example: false
        operation:
          type: boolean
          description: Operation flag
          example: false
        accounts:
          type: object
          description: Associated account information
          properties:
            buyAccount:
              type: object
              nullable: true
              description: Purchase account details
              properties:
                id:
                  type: integer
                  example: 1
                kontonr:
                  type: string
                  example: "4000"
                beskrivelse:
                  type: string
                  example: "Purchase Account"
            sellAccount:
              type: object
              nullable: true
              description: Sales account details
              properties:
                id:
                  type: integer
                  example: 2
                kontonr:
                  type: string
                  example: "1000"
                beskrivelse:
                  type: string
                  example: "Sales Account"
            buyEuAccount:
              type: object
              nullable: true
              description: EU purchase account details
              properties:
                id:
                  type: integer
                  example: 3
                kontonr:
                  type: string
                  example: "4010"
                beskrivelse:
                  type: string
                  example: "EU Purchase Account"
            sellEuAccount:
              type: object
              nullable: true
              description: EU sales account details
              properties:
                id:
                  type: integer
                  example: 4
                kontonr:
                  type: string
                  example: "1010"
                beskrivelse:
                  type: string
                  example: "EU Sales Account"
            buyOutsideEuAccount:
              type: object
              nullable: true
              description: Non-EU purchase account details
              properties:
                id:
                  type: integer
                  example: 5
                kontonr:
                  type: string
                  example: "4020"
                beskrivelse:
                  type: string
                  example: "Non-EU Purchase Account"
            sellOutsideEuAccount:
              type: object
              nullable: true
              description: Non-EU sales account details
              properties:
                id:
                  type: integer
                  example: 6
                kontonr:
                  type: string
                  example: "1020"
                beskrivelse:
                  type: string
                  example: "Non-EU Sales Account"

    ProductGroupListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProductGroupResponse'
          description: Array of product group objects
        message:
          type: string
          example: "Product groups retrieved successfully"

    # Account Schemas
    CreateAccountRequest:
      type: object
      required:
        - accountNumber
        - description
      properties:
        accountNumber:
          type: string
          description: Account number
          example: "1000"
          pattern: "^[0-9]+$"
        description:
          type: string
          description: Account description
          example: "Cash in bank"
          minLength: 1
          maxLength: 255
        accountType:
          type: string
          description: Account type
          example: "A"
          enum: ["A", "P", "E", "I", "S"]
        vat:
          type: string
          description: VAT code
          example: "A25"
          maxLength: 10
        fromAccount:
          type: integer
          description: From account
          example: 0
          minimum: 0
        toAccount:
          type: integer
          description: To account
          example: 0
          minimum: 0
        closed:
          type: string
          description: Closed status
          example: "N"
          enum: ["Y", "N"]
        openingBalance:
          type: number
          format: float
          description: Opening balance
          example: 0.0
        balance:
          type: number
          format: float
          description: Current balance
          example: 5000.0
        shortcut:
          type: string
          description: Account shortcut
          example: ""
          maxLength: 10
        transferTo:
          type: integer
          description: Transfer to account
          example: 0
          minimum: 0
        usage:
          type: string
          description: Account usage description
          example: "General"
          maxLength: 255
        contraAccount:
          type: integer
          description: Contra account
          example: 0
          minimum: 0
        currency:
          type: integer
          description: Currency ID
          example: 0
          minimum: 0
        exchangeRate:
          type: number
          format: float
          description: Exchange rate
          example: 0.0
          minimum: 0
        mapTo:
          type: integer
          description: Map to account
          example: 0
          minimum: 0

    UpdateAccountRequest:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          description: Account ID
          example: 1
          minimum: 1
        accountNumber:
          type: string
          description: Account number
          example: "1000"
          pattern: "^[0-9]+$"
        description:
          type: string
          description: Account description
          example: "Cash in bank"
          minLength: 1
          maxLength: 255
        accountType:
          type: string
          description: Account type
          example: "A"
          enum: ["A", "P", "E", "I", "S"]
        vat:
          type: string
          description: VAT code
          example: "A25"
          maxLength: 10
        fromAccount:
          type: integer
          description: From account
          example: 0
          minimum: 0
        toAccount:
          type: integer
          description: To account
          example: 0
          minimum: 0
        closed:
          type: string
          description: Closed status
          example: "N"
          enum: ["Y", "N"]
        openingBalance:
          type: number
          format: float
          description: Opening balance
          example: 0.0
        balance:
          type: number
          format: float
          description: Current balance
          example: 5000.0
        shortcut:
          type: string
          description: Account shortcut
          example: ""
          maxLength: 10
        transferTo:
          type: integer
          description: Transfer to account
          example: 0
          minimum: 0
        usage:
          type: string
          description: Account usage description
          example: "General"
          maxLength: 255
        contraAccount:
          type: integer
          description: Contra account
          example: 0
          minimum: 0
        currency:
          type: integer
          description: Currency ID
          example: 0
          minimum: 0
        exchangeRate:
          type: number
          format: float
          description: Exchange rate
          example: 0.0
          minimum: 0
        mapTo:
          type: integer
          description: Map to account
          example: 0
          minimum: 0

    AccountResponse:
      type: object
      properties:
        id:
          type: integer
          description: Account ID
          example: 1
        accountNumber:
          type: string
          description: Account number
          example: "1000"
        description:
          type: string
          description: Account description
          example: "Cash in bank"
        accountType:
          type: string
          description: Account type
          example: "A"
        vat:
          type: string
          description: VAT code
          example: "A25"
        fromAccount:
          type: integer
          description: From account
          example: 0
        toAccount:
          type: integer
          description: To account
          example: 0
        closed:
          type: string
          description: Closed status
          example: "N"
        openingBalance:
          type: number
          format: float
          description: Opening balance
          example: 0.0
        balance:
          type: number
          format: float
          description: Current balance
          example: 5000.0
        fiscalYear:
          type: integer
          description: Fiscal year
          example: 2025
        shortcut:
          type: string
          description: Account shortcut
          example: ""
        transferTo:
          type: integer
          description: Transfer to account
          example: 0
        usage:
          type: string
          description: Account usage description
          example: "General"
        contraAccount:
          type: integer
          description: Contra account
          example: 0
        currency:
          type: integer
          description: Currency ID
          example: 0
        exchangeRate:
          type: number
          format: float
          description: Exchange rate
          example: 0.0
        mapTo:
          type: integer
          description: Map to account
          example: 0

    AccountListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/AccountResponse'
          description: Array of account objects
        message:
          type: string
          example: "Accounts retrieved successfully"

    # Accounting Year Schema
    AccountingYearResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object

          properties:
            fiscal_year:
              type: integer
              description: Current fiscal year
              example: 2025
            fiscal_year_start:
              type: string
              description: Fiscal year start month
              example: "1"
            fiscal_year_end:
              type: string
              description: Fiscal year end month
              example: "12"
            current_date:
              type: string
              format: date
              description: Current date
              example: "2025-07-22"
            current_month:
              type: string
              description: Current month
              example: "07"
            current_year:
              type: string
              description: Current year
              example: "2025"
        message:
          type: string
          example: "Current fiscal year retrieved successfully"
          
          # Attachment Schemas
    AttachmentResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            filename:
              type: string
              example: "document.pdf"
            filepath:
              type: string
              example: "/var/www/html/pblm/bilag/test_4/pulje/document.pdf"
            size:
              type: integer
              description: File size in bytes
              example: 2048576
            mimeType:
              type: string
              example: "application/pdf"
            uploadDate:
              type: string
              format: date-time
              example: "2025-07-29T10:30:00Z"
            downloadUrl:
              type: string
              description: URL to download the file
              example: "/attachment?file=document.pdf&download=true"

    AttachmentListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            type: object
            properties:
              filename:
                type: string
                example: "document.pdf"
              filepath:
                type: string
                example: "/var/www/html/pblm/bilag/test_4/pulje/document.pdf"
              size:
                type: integer
                example: 2048576
              mimeType:
                type: string
                example: "application/pdf"
              uploadDate:
                type: string
                format: date-time
                example: "2025-07-29T10:30:00Z"
              downloadUrl:
                type: string
                example: "/attachment?file=document.pdf&download=true"

    AttachmentUploadResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "File uploaded successfully"
        data:
          type: object
          properties:
            filename:
              type: string
              example: "document.pdf"
            originalFilename:
              type: string
              example: "my_document.pdf"
            size:
              type: integer
              example: 2048576
            mimeType:
              type: string
              example: "application/pdf"
            uploadDate:
              type: string
              format: date-time
              example: "2025-07-29T10:30:00Z"
            converted:
              type: boolean
              description: Whether the file was converted (e.g., image to PDF)
              example: false
            downloadUrl:
              type: string
              example: "/attachment?file=document.pdf&download=true"

    # Common Response Schemas
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          description: Error message
          example: "Authentication failed"
        data:
          type: object
          nullable: true
          example: null

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          description: Success message
          example: "Operation completed successfully"
        data:
          type: object
          description: Response data


tags:
  - name: Debitor Orders
    description: Operations for debitor orders
  - name: Creditor Orders
    description: Operations for creditor orders
  - name: Order Lines
    description: Operations for order lines
  - name: Customers
    description: Operations for customers/debitors
  - name: Creditors
    description: Operations for creditors
  - name: Products
    description: Operations for products/inventory
  - name: Inventory
    description: Operations for warehouse and inventory management
  - name: Product Groups
    description: Operations for product group management
  - name: VAT
    description: Operations for VAT management
  - name: Accounts
    description: Operations for chart of accounts
  - name: Accounting Year
    description: Operations for fiscal year information
  - name: Attachments
    description: Operations for file attachment management (upload, download, delete)