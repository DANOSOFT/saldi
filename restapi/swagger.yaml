openapi: 3.0.3
info:
  title: PBLM REST API
  description: |
    A comprehensive REST API for managing orders, customers, products, and inventory.
    
    ## Authentication
    All endpoints require authentication via headers:
    - `x-db`: Database identifier
    - `x-saldiuser`: User identifier
    - `Authorization`: API key for authentication
    
  version: 1.0.0
  contact:
    name: API Support
servers:
  - url: https://ssl12.saldi.dk/pblm/restapi/endpoints/v1
    description: Local development server
  - url: https://saldi.dk/v1
    description: Production server

security:
  - DatabaseAuth: []
    UserAuth: []
    ApiKeyAuth: []

paths:
  # Debitor Orders
  /debitor/orders/:
    get:
      tags:
        - Debitor Orders
      summary: Get all debitor orders
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: orderBy
          in: query
          schema:
            type: string
            default: ordrenr
        - name: orderDirection
          in: query
          schema:
            type: string
            enum: [ASC, DESC]
            default: ASC
        - name: fromDate
          in: query
          schema:
            type: string
            format: date
        - name: toDate
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderListResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Debitor Orders
      summary: Create a new debitor order
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /debitor/orders/{id}:
    get:
      tags:
        - Debitor Orders
      summary: Get a specific debitor order
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Creditor Orders
  /creditor/orders/:
    get:
      tags:
        - Creditor Orders
      summary: Get all creditor orders
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: orderBy
          in: query
          schema:
            type: string
            default: ordrenr
        - name: orderDirection
          in: query
          schema:
            type: string
            enum: [ASC, DESC]
            default: ASC
        - name: fromDate
          in: query
          schema:
            type: string
            format: date
        - name: toDate
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: List of creditor orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderListResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Creditor Orders
      summary: Create a new creditor order
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /creditor/orders/{id}:
    get:
      tags:
        - Creditor Orders
      summary: Get a specific creditor order
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Order Lines - Debitor
  /debitor/orderlines/:
    get:
      tags:
        - Order Lines
      summary: Get order lines
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: order_id
          in: query
          required: true
          schema:
            type: integer
          description: Order ID to get lines for
      responses:
        '200':
          description: List of order lines
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderLineListResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Order Lines
      summary: Create a new order line
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderLineRequest'
      responses:
        '201':
          description: Order line created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderLineResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /debitor/orderlines/{id}:
    get:
      tags:
        - Order Lines
      summary: Get a specific order line
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Order line details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderLineResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Order Lines - Creditor
  /creditor/orderlines/:
    get:
      tags:
        - Order Lines
      summary: Get creditor order lines
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: order_id
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of order lines
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderLineListResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Order Lines
      summary: Create a new creditor order line
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderLineRequest'
      responses:
        '201':
          description: Order line created successfully
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Customers (Debitors)
  /debitor/customers/:
    get:
      tags:
        - Customers
      summary: Get all customers
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
      responses:
        '200':
          description: List of customers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerListResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Customers
      summary: Create a new customer
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerRequest'
      responses:
        '201':
          description: Customer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /debitor/customers/{id}:
    get:
      tags:
        - Customers
      summary: Get a specific customer
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Customer details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Customers
      summary: Update a customer
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomerRequest'
      responses:
        '200':
          description: Customer updated successfully
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Customers
      summary: Delete a customer
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Customer deleted successfully
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Creditors
  /creditor/creditors/:
    get:
      tags:
        - Creditors
      summary: Get all creditors
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
      responses:
        '200':
          description: List of creditors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerListResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Creditors
      summary: Create a new creditor
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerRequest'
      responses:
        '201':
          description: Creditor created successfully
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /creditor/creditors/{id}:
    get:
      tags:
        - Creditors
      summary: Get a specific creditor
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Creditor details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Creditors
      summary: Update a creditor
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomerRequest'
      responses:
        '200':
          description: Creditor updated successfully
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Creditors
      summary: Delete a creditor
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Creditor deleted successfully
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Products
  /products/:
    get:
      tags:
        - Products
      summary: Get all products
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductListResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Products
      summary: Create a new product
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /products/{id}:
    get:
      tags:
        - Products
      summary: Get a specific product
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Products
      summary: Update a product
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
      responses:
        '200':
          description: Product updated successfully
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Products
      summary: Delete a product
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Product deleted successfully
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
# Add these paths to the existing paths section

  # Inventory - Warehouses
  /inventory/warehouses/:
    get:
      tags:
        - Inventory
      summary: Get all warehouses
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: orderBy
          in: query
          schema:
            type: string
            default: kodenr
        - name: orderDirection
          in: query
          schema:
            type: string
            enum: [ASC, DESC]
            default: ASC
        - name: field
          in: query
          schema:
            type: string
        - name: value
          in: query
          schema:
            type: string
        - name: vare_id
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: List of warehouses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WarehouseListResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Inventory
      summary: Create a new warehouse
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWarehouseRequest'
      responses:
        '201':
          description: Warehouse created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WarehouseResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /inventory/warehouses/{id}:
    get:
      tags:
        - Inventory
      summary: Get a specific warehouse
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Warehouse details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WarehouseResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Warehouse not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Inventory
      summary: Update a warehouse
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWarehouseRequest'
      responses:
        '200':
          description: Warehouse updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WarehouseResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Warehouse not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Inventory - Status
  /inventory/status/:
    get:
      tags:
        - Inventory
      summary: Get inventory status
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: orderBy
          in: query
          schema:
            type: string
            default: id
        - name: orderDirection
          in: query
          schema:
            type: string
            enum: [ASC, DESC]
            default: ASC
        - name: field
          in: query
          schema:
            type: string
        - name: value
          in: query
          schema:
            type: string
        - name: lager_nr
          in: query
          schema:
            type: string
          description: Warehouse number to filter by
      responses:
        '200':
          description: List of inventory status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryStatusListResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Inventory
      summary: Create new inventory status
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInventoryStatusRequest'
      responses:
        '201':
          description: Inventory status created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryStatusResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /inventory/status/{id}:
    get:
      tags:
        - Inventory
      summary: Get specific inventory status
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Inventory status details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryStatusResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Inventory status not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Inventory
      summary: Update inventory status
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInventoryStatusRequest'
      responses:
        '200':
          description: Inventory status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryStatusResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Inventory status not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - Inventory
      summary: Adjust inventory quantities
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryAdjustmentRequest'
      responses:
        '200':
          description: Inventory quantity adjusted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryStatusResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Inventory status not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Product Groups
  /products/groups/:
    get:
      tags:
        - Product Groups
      summary: Get all product groups
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: orderBy
          in: query
          schema:
            type: string
            default: kodenr
        - name: orderDirection
          in: query
          schema:
            type: string
            enum: [ASC, DESC]
            default: ASC
        - name: field
          in: query
          schema:
            type: string
        - name: value
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of product groups
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductGroupListResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Product Groups
      summary: Create a new product group
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductGroupRequest'
      responses:
        '201':
          description: Product group created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductGroupResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /inventory/groups/{id}:
    get:
      tags:
        - Product Groups
      summary: Get a specific product group
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Product group details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductGroupResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Product Groups
      summary: Update a product group
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductGroupRequest'
      responses:
        '200':
          description: Product group updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductGroupResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                # VAT Management
  /vat/:
    get:
      tags:
        - VAT
      summary: Get all VAT items
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: orderBy
          in: query
          schema:
            type: string
            default: kodenr
        - name: orderDirection
          in: query
          schema:
            type: string
            enum: [ASC, DESC]
            default: ASC
        - name: field
          in: query
          schema:
            type: string
        - name: value
          in: query
          schema:
            type: string
        - name: vatcode
          in: query
          schema:
            type: string
          description: VAT code to filter by
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
            maximum: 200
            minimum: 1
      responses:
        '200':
          description: List of VAT items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VatListResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - VAT
      summary: Create a new VAT item
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVatRequest'
      responses:
        '201':
          description: VAT item created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VatResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /vat/{id}:
    get:
      tags:
        - VAT
      summary: Get a specific VAT item
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: VAT item details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VatResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: VAT item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - VAT
      summary: Update a VAT item
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVatRequest'
      responses:
        '200':
          description: VAT item updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VatResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: VAT item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - VAT
      summary: Delete a VAT item
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: VAT item deleted successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: VAT item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Accounts Management
  /accounts/:
    get:
      tags:
        - Accounts
      summary: Get all accounts
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: orderBy
          in: query
          schema:
            type: string
            default: kontonr
        - name: orderDirection
          in: query
          schema:
            type: string
            enum: [ASC, DESC]
            default: ASC
        - name: field
          in: query
          schema:
            type: string
        - name: value
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
            maximum: 200
            minimum: 1
      responses:
        '200':
          description: List of accounts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountListResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Accounts
      summary: Create a new account
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountRequest'
      responses:
        '201':
          description: Account created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /accounts/{id}:
    get:
      tags:
        - Accounts
      summary: Get a specific account
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Account details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Accounts
      summary: Update an account
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccountRequest'
      responses:
        '200':
          description: Account updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Accounting Year
  /accountingYear/:
    get:
      tags:
        - Accounting Year
      summary: Get current fiscal year information
      parameters:
        - $ref: '#/components/parameters/DatabaseHeader'
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/ApiKeyHeader'
      responses:
        '200':
          description: Current fiscal year information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountingYearResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: No active fiscal year found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


components:
  securitySchemes:
    DatabaseAuth:
      type: apiKey
      in: header
      name: x-db
      description: Database identifier
    UserAuth:
      type: apiKey
      in: header
      name: x-saldiuser
      description: User identifier
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      description: API key for authentication

  parameters:
    DatabaseHeader:
      name: x-db
      in: header
      required: true
      description: Database identifier
      schema:
        type: string
        example: "mycompany_db"
    UserHeader:
      name: x-saldiuser
      in: header
      required: true
      description: User identifier
      schema:
        type: string
        example: "user123"
    ApiKeyHeader:
      name: Authorization
      in: header
      required: true
      description: API key for authentication
      schema:
        type: string
        example: "your-api-key-here"

  schemas:
    # Order Schemas
    CreateOrderRequest:
      type: object
      required:
        - firmanavn
        - telefon
        - email
        - momssats
      properties:
        firmanavn:
          type: string
          description: Company name
          example: "ACME Corporation"
        telefon:
          type: string
          description: Phone number
          example: "+45 12345678"
        email:
          type: string
          format: email
          description: Email address
          example: "contact@acme.com"
        momssats:
          type: number
          format: float
          description: VAT rate
          example: 25.0
        sum:
          type: number
          format: float
          description: Order total
          example: 1250.00
        kostpris:
          type: number
          format: float
          description: Cost price
          example: 1000.00
        moms:
          type: number
          format: float
          description: VAT amount
          example: 250.00
        valuta:
          type: string
          description: Currency code
          example: "DKK"
        betalingsbet:
          type: string
          description: Payment terms
          example: "netto"
        betalingsdage:
          type: integer
          description: Payment days
          example: 8
        addr1:
          type: string
          description: Address line 1
          example: "Main Street 123"
        addr2:
          type: string
          description: Address line 2
          example: "Suite 456"
        postnr:
          type: string
          description: Postal code
          example: "1234"
        bynavn:
          type: string
          description: City name
          example: "Copenhagen"
        land:
          type: string
          description: Country
          example: "Denmark"
        lev_navn:
          type: string
          description: Delivery name
          example: "ACME Warehouse"
        lev_addr1:
          type: string
          description: Delivery address 1
          example: "Industrial Road 789"
        lev_addr2:
          type: string
          description: Delivery address 2
          example: "Building B"
        lev_postnr:
          type: string
          description: Delivery postal code
          example: "5678"
        lev_bynavn:
          type: string
          description: Delivery city
          example: "Aarhus"
        lev_land:
          type: string
          description: Delivery country
          example: "Denmark"
        ean:
          type: string
          description: EAN number
          example: "1234567890123"
        cvrnr:
          type: string
          description: CVR number
          example: "12345678"
        ordredate:
          type: string
          format: date
          description: Order date
          example: "2025-06-20"
        notes:
          type: string
          description: Notes
          example: "Urgent delivery required"
        betalt:
          type: boolean
          description: Paid status
          example: false

    OrderResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1001
        ordrenr:
          type: integer
          example: 2025001
        firmanavn:
          type: string
          example: "ACME Corporation"
        telefon:
          type: string
          example: "+45 12345678"
        email:
          type: string
          example: "contact@acme.com"
        momssats:
          type: number
          format: float
          example: 25.0
        sum:
          type: number
          format: float
          example: 1250.00
        status:
          type: integer
          example: 0
        ordredate:
          type: string
          format: date
          example: "2025-06-20"
        valuta:
          type: string
          example: "DKK"
        ref:
          type: string
          example: "user123"

    OrderListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/OrderResponse'

    # Order Line Schemas
    CreateOrderLineRequest:
      type: object
      required:
        - ordre_id
      properties:
        ordre_id:
          type: integer
          description: Order ID
          example: 1001
        varenr:
          type: string
          description: Product number
          example: "PROD001"
        antal:
          type: number
          format: float
          description: Quantity
          example: 5.0
        pris:
          type: number
          format: float
          description: Price
          example: 250.00
        rabat:
          type: number
          format: float
          description: Discount
          example: 0.0
        beskrivelse:
          type: string
          description: Description
          example: "Premium Product"
        momsfri:
          type: integer
          description: VAT exempt flag
          example: 0
        procent:
          type: number
          format: float
          description: Percentage
          example: 25.0

    OrderLineResponse:
      type: object
      properties:
        id:
          type: integer
          example: 5001
        ordre_id:
          type: integer
          example: 1001
        vare_id:
          type: integer
          example: 301
        varenr:
          type: string
          example: "PROD001"
        beskrivelse:
          type: string
          example: "Premium Product"
        antal:
          type: number
          format: float
          example: 5.0
        pris:
          type: number
          format: float
          example: 250.00
        rabat:
          type: number
          format: float
          example: 0.0

    OrderLineListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/OrderLineResponse'

    # Customer Schemas
    CreateCustomerRequest:
      type: object
      required:
        - firmanavn
        - tlf
        - email
      properties:
        firmanavn:
          type: string
          description: Company name
          example: "ACME Corporation"
        tlf:
          type: string
          description: Phone number
          example: "+45 12345678"
        email:
          type: string
          format: email
          description: Email address
          example: "contact@acme.com"
        addr1:
          type: string
          description: Address line 1
          example: "Main Street 123"
        addr2:
          type: string
          description: Address line 2
          example: "Suite 456"
        postnr:
          type: string
          description: Postal code
          example: "1234"
        bynavn:
          type: string
          description: City name
          example: "Copenhagen"
        cvrnr:
          type: string
          description: CVR number
          example: "12345678"
        land:
          type: string
          description: Country
          example: "Denmark"
        bank_navn:
          type: string
          description: Bank name
          example: "Danske Bank"
        bank_reg:
          type: string
          description: Bank registration
          example: "1234"
        bank_konto:
          type: string
          description: Bank account
          example: "567890123"
        notes:
          type: string
          description: Notes
          example: "VIP customer"
        betalingsbet:
          type: string
          description: Payment terms
          example: "netto"
        betalingsdage:
          type: integer
          description: Payment days
          example: 30
        ean:
          type: string
          description: EAN number
          example: "1234567890123"
        fornavn:
          type: string
          description: First name
          example: "John"
        efternavn:
          type: string
          description: Last name
          example: "Doe"

    UpdateCustomerRequest:
      allOf:
        - $ref: '#/components/schemas/CreateCustomerRequest'
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              description: Customer ID
              example: 201

    CustomerResponse:
      type: object
      properties:
        id:
          type: integer
          example: 201
        firmanavn:
          type: string
          example: "ACME Corporation"
        tlf:
          type: string
          example: "+45 12345678"
        email:
          type: string
          example: "contact@acme.com"
        addr1:
          type: string
          example: "Main Street 123"
        addr2:
          type: string
          example: "Suite 456"
        postnr:
          type: string
          example: "1234"
        bynavn:
          type: string
          example: "Copenhagen"
        cvrnr:
          type: string
          example: "12345678"
        land:
          type: string
          example: "Denmark"
        art:
          type: string
          example: "D"

    CustomerListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/CustomerResponse'

    # Product Schemas
    CreateProductRequest:
      type: object
      required:
        - varenr
      properties:
        varenr:
          type: string
          description: Product number
          example: "PROD001"
        stregkode:
          type: string
          description: Barcode
          example: "1234567890123"
        beskrivelse:
          type: string
          description: Description
          example: "Premium Product"
        salgspris:
          type: number
          format: float
          description: Sales price
          example: 250.00
        kostpris:
          type: number
          format: float
          description: Cost price
          example: 200.00
        size:
          type: object
          properties:
            width:
              type: number
              format: float
              example: 10.5
            height:
              type: number
              format: float
              example: 5.2
            length:
              type: number
              format: float
              example: 15.8
            netWeight:
              type: number
              format: float
              example: 1.2
            grossWeight:
              type: number
              format: float
              example: 1.5

    UpdateProductRequest:
      allOf:
        - $ref: '#/components/schemas/CreateProductRequest'
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              description: Product ID
              example: 301

    ProductResponse:
      type: object
      properties:
        id:
          type: integer
          example: 301
        varenr:
          type: string
          example: "PROD001"
        stregkode:
          type: string
          example: "1234567890123"
        beskrivelse:
          type: string
          example: "Premium Product"
        salgspris:
          type: number
          format: float
          example: 250.00
        kostpris:
          type: number
          format: float
          example: 200.00
        modtime:
          type: string
          format: date-time
          example: "2025-06-20T10:30:00Z"

    ProductListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProductResponse'

    # Warehouse Schemas
    CreateWarehouseRequest:
      type: object
      required:
        - beskrivelse
        - nr
      properties:
        beskrivelse:
          type: string
          description: Warehouse description
          example: "Main Warehouse"
        nr:
          type: string
          description: Warehouse number
          example: "001"
        fiscal_year:
          type: integer
          description: Fiscal year
          example: 2025

    UpdateWarehouseRequest:
      allOf:
        - $ref: '#/components/schemas/CreateWarehouseRequest'
        - type: object
          properties:
            id:
              type: integer
              description: Warehouse ID
              example: 1

    WarehouseResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        beskrivelse:
          type: string
          example: "Main Warehouse"
        nr:
          type: string
          example: "001"
        fiscal_year:
          type: integer
          example: 2025

    WarehouseListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/WarehouseResponse'

    # Inventory Status Schemas
    CreateInventoryStatusRequest:
      type: object
      required:
        - lager
        - vare_id
        - beholdning
      properties:
        lager:
          type: string
          description: Warehouse identifier
          example: "001"
        vare_id:
          type: integer
          description: Product ID
          example: 301
        beholdning:
          type: number
          format: float
          description: Stock quantity
          example: 100.0
        lok:
          type: string
          description: Location within warehouse
          example: "A1-01"
        variant_id:
          type: integer
          description: Product variant ID
          example: 1

    UpdateInventoryStatusRequest:
      allOf:
        - $ref: '#/components/schemas/CreateInventoryStatusRequest'
        - type: object
          properties:
            id:
              type: integer
              description: Inventory status ID
              example: 1

    InventoryAdjustmentRequest:
      type: object
      required:
        - action
      properties:
        action:
          type: string
          enum: [adjust_quantity, set_quantity]
          description: Type of adjustment
          example: "adjust_quantity"
        amount:
          type: number
          format: float
          description: Amount to adjust (for adjust_quantity)
          example: 10.0
        quantity:
          type: number
          format: float
          description: New quantity (for set_quantity)
          example: 50.0

    InventoryStatusResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        lager:
          type: string
          example: "001"
        vare_id:
          type: integer
          example: 301
        beholdning:
          type: number
          format: float
          example: 100.0
        lok:
          type: string
          example: "A1-01"
        variant_id:
          type: integer
          example: 1

    InventoryStatusListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/InventoryStatusResponse'

    # Product Group Schemas
    CreateProductGroupRequest:
      type: object
      required:
        - kodenr
        - beskrivelse
      properties:
        kodenr:
          type: string
          description: Group code
          example: "ELEC"
        beskrivelse:
          type: string
          description: Group description
          example: "Electronics"
        fiscal_year:
          type: integer
          description: Fiscal year
          example: 2025
        omv_bet:
          type: boolean
          description: Reverse charge
          example: false
        moms_fri:
          type: boolean
          description: VAT exempt
          example: false
        lager:
          type: boolean
          description: Inventory tracked
          example: true
        batch:
          type: boolean
          description: Batch tracking
          example: false
        operation:
          type: boolean
          description: Operation
          example: false
        buy_account:
          type: string
          description: Purchase account
          example: "4000"
        sell_account:
          type: string
          description: Sales account
          example: "1000"
        buy_eu_account:
          type: string
          description: EU purchase account
          example: "4010"
        sell_eu_account:
          type: string
          description: EU sales account
          example: "1010"
        buy_outside_eu_account:
          type: string
          description: Non-EU purchase account
          example: "4020"
        sell_outside_eu_account:
          type: string
          description: Non-EU sales account
          example: "1020"

    UpdateProductGroupRequest:
      allOf:
        - $ref: '#/components/schemas/CreateProductGroupRequest'
        - type: object
          properties:
            id:
              type: integer
              description: Product group ID
              example: 1

    ProductGroupResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        kodenr:
          type: string
          example: "ELEC"
        beskrivelse:
          type: string
          example: "Electronics"
        fiscal_year:
          type: integer
          example: 2025
        omv_bet:
          type: boolean
          example: false
        moms_fri:
          type: boolean
          example: false
        lager:
          type: boolean
          example: true
        batch:
          type: boolean
          example: false
        operation:
          type: boolean
          example: false
        buy_account:
          type: string
          example: "4000"
        sell_account:
          type: string
          example: "1000"

    ProductGroupListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProductGroupResponse'
            # VAT Schemas
    CreateVatRequest:
      type: object
      required:
        - momskode
        - nr
        - beskrivelse
      properties:
        momskode:
          type: string
          description: VAT code
          example: "A"
        nr:
          type: string
          description: VAT number
          example: "25"
        beskrivelse:
          type: string
          description: VAT description
          example: "Standard VAT 25%"
        account:
          type: string
          description: Account number
          example: "2510"
        sats:
          type: number
          format: float
          description: VAT rate
          example: 25.0
        modkonto:
          type: string
          description: Contra account
          example: "2520"
        map:
          type: string
          description: Mapping
          example: "1"

    UpdateVatRequest:
      allOf:
        - $ref: '#/components/schemas/CreateVatRequest'
        - type: object
          properties:
            id:
              type: integer
              description: VAT item ID
              example: 1

    VatResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        momskode:
          type: string
          example: "A"
        nr:
          type: string
          example: "25"
        beskrivelse:
          type: string
          example: "Standard VAT 25%"
        fiscal_year:
          type: integer
          example: 2025
        account:
          type: string
          example: "2510"
        sats:
          type: number
          format: float
          example: 25.0
        modkonto:
          type: string
          example: "2520"
        map:
          type: string
          example: "1"

    VatListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/VatResponse'

    # Account Schemas
    CreateAccountRequest:
      type: object
      required:
        - kontonr
        - beskrivelse
      properties:
        kontonr:
          type: string
          description: Account number
          example: "1000"
        beskrivelse:
          type: string
          description: Account description
          example: "Cash in bank"
        kontotype:
          type: string
          description: Account type
          example: "A"
        moms:
          type: string
          description: VAT code
          example: "A25"
        fra_kto:
          type: integer
          description: From account
          example: 0
        til_kto:
          type: integer
          description: To account
          example: 0
        lukket:
          type: string
          description: Closed status
          example: "N"
        primo:
          type: number
          format: float
          description: Opening balance
          example: 0.0
        saldo:
          type: number
          format: float
          description: Current balance
          example: 5000.0
        genvej:
          type: string
          description: Shortcut
          example: ""
        overfor_til:
          type: integer
          description: Transfer to
          example: 0
        anvendelse:
          type: string
          description: Usage
          example: "General"
        modkonto:
          type: integer
          description: Contra account
          example: 0
        valuta:
          type: integer
          description: Currency ID
          example: 0
        valutakurs:
          type: number
          format: float
          description: Exchange rate
          example: 0.0
        map_to:
          type: integer
          description: Map to
          example: 0

    UpdateAccountRequest:
      allOf:
        - $ref: '#/components/schemas/CreateAccountRequest'
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              description: Account ID
              example: 1

    AccountResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        kontonr:
          type: string
          example: "1000"
        beskrivelse:
          type: string
          example: "Cash in bank"
        kontotype:
          type: string
          example: "A"
        moms:
          type: string
          example: "A25"
        fra_kto:
          type: integer
          example: 0
        til_kto:
          type: integer
          example: 0
        lukket:
          type: string
          example: "N"
        primo:
          type: number
          format: float
          example: 0.0
        saldo:
          type: number
          format: float
          example: 5000.0
        genvej:
          type: string
          example: ""
        overfor_til:
          type: integer
          example: 0
        anvendelse:
          type: string
          example: "General"
        modkonto:
          type: integer
          example: 0
        valuta:
          type: integer
          example: 0
        valutakurs:
          type: number
          format: float
          example: 0.0
        map_to:
          type: integer
          example: 0

    AccountListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/AccountResponse'

    # Accounting Year Schema
    AccountingYearResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            fiscal_year:
              type: integer
              description: Current fiscal year
              example: 2025
            fiscal_year_start:
              type: string
              description: Fiscal year start month
              example: "1"
            fiscal_year_end:
              type: string
              description: Fiscal year end month
              example: "12"
            current_date:
              type: string
              format: date
              description: Current date
              example: "2025-07-22"
            current_month:
              type: string
              description: Current month
              example: "07"
            current_year:
              type: string
              description: Current year
              example: "2025"
        message:
          type: string
          example: "Current fiscal year retrieved successfully"

    # Common Response Schemas
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          description: Error message
          example: "Authentication failed"
        data:
          type: object
          nullable: true
          example: null

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          description: Success message
          example: "Operation completed successfully"
        data:
          type: object
          description: Response data


tags:
  - name: Debitor Orders
    description: Operations for debitor orders
  - name: Creditor Orders
    description: Operations for creditor orders
  - name: Order Lines
    description: Operations for order lines
  - name: Customers
    description: Operations for customers/debitors
  - name: Creditors
    description: Operations for creditors
  - name: Products
    description: Operations for products/inventory
  - name: Inventory
    description: Operations for warehouse and inventory management
  - name: Product Groups
    description: Operations for product group management
  - name: VAT
    description: Operations for VAT management
  - name: Accounts
    description: Operations for chart of accounts
  - name: Accounting Year
    description: Operations for fiscal year information